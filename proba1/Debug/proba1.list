
proba1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013d8  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007790  08007790  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08007790  08007790  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007790  08007790  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000018  080077b0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080077b0  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8f8  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226d  00000000  00000000  0002e939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00030ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00031ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018914  00000000  00000000  00032928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010012  00000000  00000000  0004b23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091101  00000000  00000000  0005b24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec34f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004258  00000000  00000000  000ec3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	080063a0 	.word	0x080063a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	080063a0 	.word	0x080063a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <Preobr_LCD>:
   	 255
}; // 255 = 500 ms delay


void	Preobr_LCD (uint16_t c)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
	sts_LCD = (c%1000000UL)/100000UL;
 8000f8a:	88fa      	ldrh	r2, [r7, #6]
 8000f8c:	4b35      	ldr	r3, [pc, #212]	; (8001064 <Preobr_LCD+0xe4>)
 8000f8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000f92:	0c9b      	lsrs	r3, r3, #18
 8000f94:	4934      	ldr	r1, [pc, #208]	; (8001068 <Preobr_LCD+0xe8>)
 8000f96:	fb01 f303 	mul.w	r3, r1, r3
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	4a33      	ldr	r2, [pc, #204]	; (800106c <Preobr_LCD+0xec>)
 8000fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa4:	09db      	lsrs	r3, r3, #7
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b31      	ldr	r3, [pc, #196]	; (8001070 <Preobr_LCD+0xf0>)
 8000faa:	701a      	strb	r2, [r3, #0]
	dts_LCD = (c%100000UL)/10000UL;
 8000fac:	88fa      	ldrh	r2, [r7, #6]
 8000fae:	0953      	lsrs	r3, r2, #5
 8000fb0:	492e      	ldr	r1, [pc, #184]	; (800106c <Preobr_LCD+0xec>)
 8000fb2:	fba1 1303 	umull	r1, r3, r1, r3
 8000fb6:	09db      	lsrs	r3, r3, #7
 8000fb8:	492e      	ldr	r1, [pc, #184]	; (8001074 <Preobr_LCD+0xf4>)
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	; (8001078 <Preobr_LCD+0xf8>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	0b5b      	lsrs	r3, r3, #13
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <Preobr_LCD+0xfc>)
 8000fcc:	701a      	strb	r2, [r3, #0]
	tis_LCD = (c%10000UL)/1000UL;
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	4a29      	ldr	r2, [pc, #164]	; (8001078 <Preobr_LCD+0xf8>)
 8000fd2:	fba2 1203 	umull	r1, r2, r2, r3
 8000fd6:	0b52      	lsrs	r2, r2, #13
 8000fd8:	f242 7110 	movw	r1, #10000	; 0x2710
 8000fdc:	fb01 f202 	mul.w	r2, r1, r2
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <Preobr_LCD+0x100>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	099b      	lsrs	r3, r3, #6
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <Preobr_LCD+0x104>)
 8000ff2:	701a      	strb	r2, [r3, #0]
	sot_LCD = (c%1000UL)/100UL;
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	4a22      	ldr	r2, [pc, #136]	; (8001080 <Preobr_LCD+0x100>)
 8000ff8:	fba2 1203 	umull	r1, r2, r2, r3
 8000ffc:	0992      	lsrs	r2, r2, #6
 8000ffe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001002:	fb01 f202 	mul.w	r2, r1, r2
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <Preobr_LCD+0x108>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	095b      	lsrs	r3, r3, #5
 8001012:	b29b      	uxth	r3, r3
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <Preobr_LCD+0x10c>)
 8001018:	701a      	strb	r2, [r3, #0]
	des_LCD = (c%100UL)/10UL;
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <Preobr_LCD+0x108>)
 800101e:	fba2 1203 	umull	r1, r2, r2, r3
 8001022:	0952      	lsrs	r2, r2, #5
 8001024:	2164      	movs	r1, #100	; 0x64
 8001026:	fb01 f202 	mul.w	r2, r1, r2
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	4a18      	ldr	r2, [pc, #96]	; (8001090 <Preobr_LCD+0x110>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	08db      	lsrs	r3, r3, #3
 8001036:	b29b      	uxth	r3, r3
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <Preobr_LCD+0x114>)
 800103c:	701a      	strb	r2, [r3, #0]
	edi_LCD =  c%10UL;
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <Preobr_LCD+0x110>)
 8001042:	fba3 1302 	umull	r1, r3, r3, r2
 8001046:	08d9      	lsrs	r1, r3, #3
 8001048:	460b      	mov	r3, r1
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	b29b      	uxth	r3, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <Preobr_LCD+0x118>)
 8001058:	701a      	strb	r2, [r3, #0]
	return;
 800105a:	bf00      	nop
}
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	431bde83 	.word	0x431bde83
 8001068:	000f4240 	.word	0x000f4240
 800106c:	0a7c5ac5 	.word	0x0a7c5ac5
 8001070:	20000039 	.word	0x20000039
 8001074:	000186a0 	.word	0x000186a0
 8001078:	d1b71759 	.word	0xd1b71759
 800107c:	20000038 	.word	0x20000038
 8001080:	10624dd3 	.word	0x10624dd3
 8001084:	20000037 	.word	0x20000037
 8001088:	51eb851f 	.word	0x51eb851f
 800108c:	20000036 	.word	0x20000036
 8001090:	cccccccd 	.word	0xcccccccd
 8001094:	20000035 	.word	0x20000035
 8001098:	20000034 	.word	0x20000034

0800109c <IPS_st7789_Reset>:


static void IPS_st7789_Reset()
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(IPS_Res_GPIO_Port, IPS_Res_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a6:	480d      	ldr	r0, [pc, #52]	; (80010dc <IPS_st7789_Reset+0x40>)
 80010a8:	f002 fdec 	bl	8003c84 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80010ac:	2064      	movs	r0, #100	; 0x64
 80010ae:	f001 fedb 	bl	8002e68 <HAL_Delay>
    HAL_GPIO_WritePin(IPS_Res_GPIO_Port, IPS_Res_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <IPS_st7789_Reset+0x40>)
 80010ba:	f002 fde3 	bl	8003c84 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f001 fed2 	bl	8002e68 <HAL_Delay>
    HAL_GPIO_WritePin(IPS_Res_GPIO_Port, IPS_Res_Pin, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <IPS_st7789_Reset+0x40>)
 80010cc:	f002 fdda 	bl	8003c84 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80010d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d4:	f001 fec8 	bl	8002e68 <HAL_Delay>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40010800 	.word	0x40010800

080010e0 <IPS_st7789_WriteCommand>:

static void IPS_st7789_WriteCommand(uint8_t cmd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(IPS_DC_GPIO_Port, IPS_DC_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <IPS_st7789_WriteCommand+0x2c>)
 80010f2:	f002 fdc7 	bl	8003c84 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&IPS_st7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80010f6:	1df9      	adds	r1, r7, #7
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
 80010fc:	2201      	movs	r2, #1
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <IPS_st7789_WriteCommand+0x30>)
 8001100:	f003 fbec 	bl	80048dc <HAL_SPI_Transmit>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40010800 	.word	0x40010800
 8001110:	2000006c 	.word	0x2000006c

08001114 <IPS_st7789_WriteData>:

static void IPS_st7789_WriteData(uint8_t* buff, uint8_t buff_size)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(IPS_DC_GPIO_Port, IPS_DC_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <IPS_st7789_WriteData+0x30>)
 8001128:	f002 fdac 	bl	8003c84 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&IPS_st7789_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	b29a      	uxth	r2, r3
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <IPS_st7789_WriteData+0x34>)
 8001138:	f003 fbd0 	bl	80048dc <HAL_SPI_Transmit>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40010800 	.word	0x40010800
 8001148:	2000006c 	.word	0x2000006c

0800114c <IPS_st7789_ExecuteCommandList>:

static void IPS_st7789_ExecuteCommandList(const uint8_t *addr) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 800115e:	e034      	b.n	80011ca <IPS_st7789_ExecuteCommandList+0x7e>
    {
        uint8_t cmd = *addr++;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	72fb      	strb	r3, [r7, #11]
        IPS_st7789_WriteCommand(cmd);
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ffb7 	bl	80010e0 <IPS_st7789_WriteCommand>

        numArgs = *addr++;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	72bb      	strb	r3, [r7, #10]

        ms = numArgs & ST_CMD_DELAY; // If high bit set, delay follows args
 800117c:	7abb      	ldrb	r3, [r7, #10]
 800117e:	b29b      	uxth	r3, r3
 8001180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001184:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~ST_CMD_DELAY;
 8001186:	7abb      	ldrb	r3, [r7, #10]
 8001188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800118c:	72bb      	strb	r3, [r7, #10]

        if(numArgs)
 800118e:	7abb      	ldrb	r3, [r7, #10]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <IPS_st7789_ExecuteCommandList+0x5a>
        {
        	IPS_st7789_WriteData((uint8_t*)addr, numArgs);
 8001194:	7abb      	ldrb	r3, [r7, #10]
 8001196:	4619      	mov	r1, r3
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ffbb 	bl	8001114 <IPS_st7789_WriteData>
            addr += numArgs;
 800119e:	7abb      	ldrb	r3, [r7, #10]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 80011a6:	89bb      	ldrh	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00e      	beq.n	80011ca <IPS_st7789_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) {ms = 500;}
 80011b6:	89bb      	ldrh	r3, [r7, #12]
 80011b8:	2bff      	cmp	r3, #255	; 0xff
 80011ba:	d102      	bne.n	80011c2 <IPS_st7789_ExecuteCommandList+0x76>
 80011bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011c0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fe4f 	bl	8002e68 <HAL_Delay>
    while(numCommands--)
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	73fa      	strb	r2, [r7, #15]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1c5      	bne.n	8001160 <IPS_st7789_ExecuteCommandList+0x14>
        }
    }
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <IPS_st7789_SetAddressWindow>:



static void IPS_st7789_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80011de:	b590      	push	{r4, r7, lr}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4604      	mov	r4, r0
 80011e6:	4608      	mov	r0, r1
 80011e8:	4611      	mov	r1, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	4623      	mov	r3, r4
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4603      	mov	r3, r0
 80011f2:	71bb      	strb	r3, [r7, #6]
 80011f4:	460b      	mov	r3, r1
 80011f6:	717b      	strb	r3, [r7, #5]
 80011f8:	4613      	mov	r3, r2
 80011fa:	713b      	strb	r3, [r7, #4]
    // column address set
	IPS_st7789_WriteCommand(ST7789_CASET );
 80011fc:	202a      	movs	r0, #42	; 0x2a
 80011fe:	f7ff ff6f 	bl	80010e0 <IPS_st7789_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7789_240x240_XSTART , 0x00, x1 + ST7789_240x240_XSTART  };
 8001202:	2300      	movs	r3, #0
 8001204:	733b      	strb	r3, [r7, #12]
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	737b      	strb	r3, [r7, #13]
 800120a:	2300      	movs	r3, #0
 800120c:	73bb      	strb	r3, [r7, #14]
 800120e:	797b      	ldrb	r3, [r7, #5]
 8001210:	73fb      	strb	r3, [r7, #15]
    IPS_st7789_WriteData(data, sizeof(data));
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2104      	movs	r1, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff7b 	bl	8001114 <IPS_st7789_WriteData>

    // row address set
    IPS_st7789_WriteCommand(ST7789_RASET );
 800121e:	202b      	movs	r0, #43	; 0x2b
 8001220:	f7ff ff5e 	bl	80010e0 <IPS_st7789_WriteCommand>
    data[1] = y0 + ST7789_240x240_YSTART ;
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7789_240x240_YSTART ;
 8001228:	793b      	ldrb	r3, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
    IPS_st7789_WriteData(data, sizeof(data));
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2104      	movs	r1, #4
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff6e 	bl	8001114 <IPS_st7789_WriteData>

    // write to RAM
    IPS_st7789_WriteCommand(ST7789_RAMWR );
 8001238:	202c      	movs	r0, #44	; 0x2c
 800123a:	f7ff ff51 	bl	80010e0 <IPS_st7789_WriteCommand>
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
	...

08001248 <IPS_st7789_Init>:

void IPS_st7789_Init()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	IPS_st7789_Reset();
 800124c:	f7ff ff26 	bl	800109c <IPS_st7789_Reset>
	IPS_st7789_ExecuteCommandList(cmd_240x240);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <IPS_st7789_Init+0x14>)
 8001252:	f7ff ff7b 	bl	800114c <IPS_st7789_ExecuteCommandList>
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	08006408 	.word	0x08006408

08001260 <IPS_st7789_WriteChar>:
    IPS_st7789_SetAddressWindow(x, y, x+1, y+1);
    uint8_t data[] = { color >> 8, color & 0xFF };
    IPS_st7789_WriteData(data, sizeof(data));
}

 void IPS_st7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001260:	b082      	sub	sp, #8
 8001262:	b590      	push	{r4, r7, lr}
 8001264:	b089      	sub	sp, #36	; 0x24
 8001266:	af00      	add	r7, sp, #0
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	460b      	mov	r3, r1
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    IPS_st7789_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2d8      	uxtb	r0, r3
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	b2d9      	uxtb	r1, r3
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001286:	4413      	add	r3, r2
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3b01      	subs	r3, #1
 800128c:	b2dc      	uxtb	r4, r3
 800128e:	88bb      	ldrh	r3, [r7, #4]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001296:	4413      	add	r3, r2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	3b01      	subs	r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4622      	mov	r2, r4
 80012a0:	f7ff ff9d 	bl	80011de <IPS_st7789_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	e043      	b.n	8001332 <IPS_st7789_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80012aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	3b20      	subs	r3, #32
 80012b0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80012b4:	fb01 f303 	mul.w	r3, r1, r3
 80012b8:	4619      	mov	r1, r3
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	440b      	add	r3, r1
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	e029      	b.n	8001320 <IPS_st7789_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00e      	beq.n	80012fa <IPS_st7789_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80012dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	743b      	strb	r3, [r7, #16]
 80012e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	747b      	strb	r3, [r7, #17]
                IPS_st7789_WriteData(data, sizeof(data));
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	2102      	movs	r1, #2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff0e 	bl	8001114 <IPS_st7789_WriteData>
 80012f8:	e00f      	b.n	800131a <IPS_st7789_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80012fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	b29b      	uxth	r3, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	733b      	strb	r3, [r7, #12]
 8001306:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800130a:	b2db      	uxtb	r3, r3
 800130c:	737b      	strb	r3, [r7, #13]
                IPS_st7789_WriteData(data, sizeof(data));
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2102      	movs	r1, #2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fefd 	bl	8001114 <IPS_st7789_WriteData>
        for(j = 0; j < font.width; j++) {
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	3301      	adds	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001324:	461a      	mov	r2, r3
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4293      	cmp	r3, r2
 800132a:	d3cf      	bcc.n	80012cc <IPS_st7789_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	3301      	adds	r3, #1
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001336:	461a      	mov	r2, r3
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	4293      	cmp	r3, r2
 800133c:	d3b5      	bcc.n	80012aa <IPS_st7789_WriteChar+0x4a>
            }
        }
    }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	3724      	adds	r7, #36	; 0x24
 8001344:	46bd      	mov	sp, r7
 8001346:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800134a:	b002      	add	sp, #8
 800134c:	4770      	bx	lr
	...

08001350 <IPS_st7789_WriteU16>:

 void IPS_st7789_WriteU16(uint16_t x, uint16_t y, uint16_t dig, uint16_t zap, FontDef font, uint16_t color, uint16_t bgcolor)
 {
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af04      	add	r7, sp, #16
 8001356:	4604      	mov	r4, r0
 8001358:	4608      	mov	r0, r1
 800135a:	4611      	mov	r1, r2
 800135c:	461a      	mov	r2, r3
 800135e:	4623      	mov	r3, r4
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	4603      	mov	r3, r0
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]
 800136a:	4613      	mov	r3, r2
 800136c:	803b      	strh	r3, [r7, #0]
	 int flag = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]


	 Preobr_LCD (dig);
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe03 	bl	8000f80 <Preobr_LCD>

	 IPS_st7789_WriteChar(x                     , y, ' ', font, color, bgcolor);
 800137a:	88b9      	ldrh	r1, [r7, #4]
 800137c:	88f8      	ldrh	r0, [r7, #6]
 800137e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	2220      	movs	r2, #32
 800138e:	f7ff ff67 	bl	8001260 <IPS_st7789_WriteChar>
	 IPS_st7789_WriteChar(x +     font.width - 1, y, ' ', font, color, bgcolor);
 8001392:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001396:	b29a      	uxth	r2, r3
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	4413      	add	r3, r2
 800139c:	b29b      	uxth	r3, r3
 800139e:	3b01      	subs	r3, #1
 80013a0:	b298      	uxth	r0, r3
 80013a2:	88b9      	ldrh	r1, [r7, #4]
 80013a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	2220      	movs	r2, #32
 80013b4:	f7ff ff54 	bl	8001260 <IPS_st7789_WriteChar>
	 IPS_st7789_WriteChar(x + 2 * font.width - 1, y, ' ', font, color, bgcolor);
 80013b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4413      	add	r3, r2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b298      	uxth	r0, r3
 80013cc:	88b9      	ldrh	r1, [r7, #4]
 80013ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	2220      	movs	r2, #32
 80013de:	f7ff ff3f 	bl	8001260 <IPS_st7789_WriteChar>
//	 IPS_st7789_WriteChar(x + 3 * font.width - 1, y, ' ', font, color, bgcolor);
//	 IPS_st7789_WriteChar(x + 4 * font.width - 1, y, ' ', font, color, bgcolor);
//	 IPS_st7789_WriteChar(x + 5 * font.width - 1, y, ' ', font, color, bgcolor);

	 if((sts_LCD) || (zap == 5))           {IPS_st7789_WriteChar(x, y, sts_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 80013e2:	4b92      	ldr	r3, [pc, #584]	; (800162c <IPS_st7789_WriteU16+0x2dc>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <IPS_st7789_WriteU16+0xa0>
 80013ea:	883b      	ldrh	r3, [r7, #0]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d118      	bne.n	8001422 <IPS_st7789_WriteU16+0xd2>
 80013f0:	4b8e      	ldr	r3, [pc, #568]	; (800162c <IPS_st7789_WriteU16+0x2dc>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	3330      	adds	r3, #48	; 0x30
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	88b9      	ldrh	r1, [r7, #4]
 80013fa:	88f8      	ldrh	r0, [r7, #6]
 80013fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	f7ff ff29 	bl	8001260 <IPS_st7789_WriteChar>
 800140e:	2301      	movs	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001416:	b29a      	uxth	r2, r3
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	4413      	add	r3, r2
 800141c:	b29b      	uxth	r3, r3
 800141e:	3b01      	subs	r3, #1
 8001420:	80fb      	strh	r3, [r7, #6]
	 if(zap == 5){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 8001422:	883b      	ldrh	r3, [r7, #0]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d113      	bne.n	8001450 <IPS_st7789_WriteU16+0x100>
 8001428:	88b9      	ldrh	r1, [r7, #4]
 800142a:	88f8      	ldrh	r0, [r7, #6]
 800142c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	222c      	movs	r2, #44	; 0x2c
 800143c:	f7ff ff10 	bl	8001260 <IPS_st7789_WriteChar>
 8001440:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001444:	b29a      	uxth	r2, r3
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	4413      	add	r3, r2
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b01      	subs	r3, #1
 800144e:	80fb      	strh	r3, [r7, #6]
	 if((dts_LCD) || (flag) || (zap == 4)) {IPS_st7789_WriteChar(x, y, dts_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 8001450:	4b77      	ldr	r3, [pc, #476]	; (8001630 <IPS_st7789_WriteU16+0x2e0>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d105      	bne.n	8001464 <IPS_st7789_WriteU16+0x114>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <IPS_st7789_WriteU16+0x114>
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	2b04      	cmp	r3, #4
 8001462:	d118      	bne.n	8001496 <IPS_st7789_WriteU16+0x146>
 8001464:	4b72      	ldr	r3, [pc, #456]	; (8001630 <IPS_st7789_WriteU16+0x2e0>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	3330      	adds	r3, #48	; 0x30
 800146a:	b2da      	uxtb	r2, r3
 800146c:	88b9      	ldrh	r1, [r7, #4]
 800146e:	88f8      	ldrh	r0, [r7, #6]
 8001470:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	f7ff feef 	bl	8001260 <IPS_st7789_WriteChar>
 8001482:	2301      	movs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	f897 3020 	ldrb.w	r3, [r7, #32]
 800148a:	b29a      	uxth	r2, r3
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	4413      	add	r3, r2
 8001490:	b29b      	uxth	r3, r3
 8001492:	3b01      	subs	r3, #1
 8001494:	80fb      	strh	r3, [r7, #6]
	 if(zap == 4){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 8001496:	883b      	ldrh	r3, [r7, #0]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d113      	bne.n	80014c4 <IPS_st7789_WriteU16+0x174>
 800149c:	88b9      	ldrh	r1, [r7, #4]
 800149e:	88f8      	ldrh	r0, [r7, #6]
 80014a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	222c      	movs	r2, #44	; 0x2c
 80014b0:	f7ff fed6 	bl	8001260 <IPS_st7789_WriteChar>
 80014b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	4413      	add	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3b01      	subs	r3, #1
 80014c2:	80fb      	strh	r3, [r7, #6]
	 if((tis_LCD) || (flag) || (zap == 3)) {IPS_st7789_WriteChar(x, y, tis_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 80014c4:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <IPS_st7789_WriteU16+0x2e4>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d105      	bne.n	80014d8 <IPS_st7789_WriteU16+0x188>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <IPS_st7789_WriteU16+0x188>
 80014d2:	883b      	ldrh	r3, [r7, #0]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d118      	bne.n	800150a <IPS_st7789_WriteU16+0x1ba>
 80014d8:	4b56      	ldr	r3, [pc, #344]	; (8001634 <IPS_st7789_WriteU16+0x2e4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3330      	adds	r3, #48	; 0x30
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	88b9      	ldrh	r1, [r7, #4]
 80014e2:	88f8      	ldrh	r0, [r7, #6]
 80014e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	f7ff feb5 	bl	8001260 <IPS_st7789_WriteChar>
 80014f6:	2301      	movs	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4413      	add	r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	80fb      	strh	r3, [r7, #6]
	 if(zap == 3){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 800150a:	883b      	ldrh	r3, [r7, #0]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d113      	bne.n	8001538 <IPS_st7789_WriteU16+0x1e8>
 8001510:	88b9      	ldrh	r1, [r7, #4]
 8001512:	88f8      	ldrh	r0, [r7, #6]
 8001514:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	222c      	movs	r2, #44	; 0x2c
 8001524:	f7ff fe9c 	bl	8001260 <IPS_st7789_WriteChar>
 8001528:	f897 3020 	ldrb.w	r3, [r7, #32]
 800152c:	b29a      	uxth	r2, r3
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4413      	add	r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	80fb      	strh	r3, [r7, #6]
	 if((sot_LCD) || (flag) || (zap == 2)) {IPS_st7789_WriteChar(x, y, sot_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <IPS_st7789_WriteU16+0x2e8>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <IPS_st7789_WriteU16+0x1fc>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <IPS_st7789_WriteU16+0x1fc>
 8001546:	883b      	ldrh	r3, [r7, #0]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d118      	bne.n	800157e <IPS_st7789_WriteU16+0x22e>
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <IPS_st7789_WriteU16+0x2e8>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3330      	adds	r3, #48	; 0x30
 8001552:	b2da      	uxtb	r2, r3
 8001554:	88b9      	ldrh	r1, [r7, #4]
 8001556:	88f8      	ldrh	r0, [r7, #6]
 8001558:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800155a:	9302      	str	r3, [sp, #8]
 800155c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	f7ff fe7b 	bl	8001260 <IPS_st7789_WriteChar>
 800156a:	2301      	movs	r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001572:	b29a      	uxth	r2, r3
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4413      	add	r3, r2
 8001578:	b29b      	uxth	r3, r3
 800157a:	3b01      	subs	r3, #1
 800157c:	80fb      	strh	r3, [r7, #6]
	 if(zap == 2){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 800157e:	883b      	ldrh	r3, [r7, #0]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d113      	bne.n	80015ac <IPS_st7789_WriteU16+0x25c>
 8001584:	88b9      	ldrh	r1, [r7, #4]
 8001586:	88f8      	ldrh	r0, [r7, #6]
 8001588:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	222c      	movs	r2, #44	; 0x2c
 8001598:	f7ff fe62 	bl	8001260 <IPS_st7789_WriteChar>
 800159c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4413      	add	r3, r2
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3b01      	subs	r3, #1
 80015aa:	80fb      	strh	r3, [r7, #6]
	 if((des_LCD) || (flag) || (zap == 1)) {IPS_st7789_WriteChar(x, y, des_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <IPS_st7789_WriteU16+0x2ec>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <IPS_st7789_WriteU16+0x270>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <IPS_st7789_WriteU16+0x270>
 80015ba:	883b      	ldrh	r3, [r7, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d118      	bne.n	80015f2 <IPS_st7789_WriteU16+0x2a2>
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <IPS_st7789_WriteU16+0x2ec>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	3330      	adds	r3, #48	; 0x30
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	88b9      	ldrh	r1, [r7, #4]
 80015ca:	88f8      	ldrh	r0, [r7, #6]
 80015cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	f7ff fe41 	bl	8001260 <IPS_st7789_WriteChar>
 80015de:	2301      	movs	r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	3b01      	subs	r3, #1
 80015f0:	80fb      	strh	r3, [r7, #6]
	 if(zap == 1){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 80015f2:	883b      	ldrh	r3, [r7, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d113      	bne.n	8001620 <IPS_st7789_WriteU16+0x2d0>
 80015f8:	88b9      	ldrh	r1, [r7, #4]
 80015fa:	88f8      	ldrh	r0, [r7, #6]
 80015fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	222c      	movs	r2, #44	; 0x2c
 800160c:	f7ff fe28 	bl	8001260 <IPS_st7789_WriteChar>
 8001610:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001614:	b29a      	uxth	r2, r3
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4413      	add	r3, r2
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	80fb      	strh	r3, [r7, #6]
	                          IPS_st7789_WriteChar(x, y, edi_LCD + 0x30, font, color, bgcolor); flag = 1;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <IPS_st7789_WriteU16+0x2f0>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	3330      	adds	r3, #48	; 0x30
 8001626:	b2da      	uxtb	r2, r3
 8001628:	88b9      	ldrh	r1, [r7, #4]
 800162a:	e00b      	b.n	8001644 <IPS_st7789_WriteU16+0x2f4>
 800162c:	20000039 	.word	0x20000039
 8001630:	20000038 	.word	0x20000038
 8001634:	20000037 	.word	0x20000037
 8001638:	20000036 	.word	0x20000036
 800163c:	20000035 	.word	0x20000035
 8001640:	20000034 	.word	0x20000034
 8001644:	88f8      	ldrh	r0, [r7, #6]
 8001646:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	f7ff fe04 	bl	8001260 <IPS_st7789_WriteChar>
 8001658:	2301      	movs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
	 Poz = x + font.width - 1;
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001664:	4413      	add	r3, r2
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3b01      	subs	r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b02      	ldr	r3, [pc, #8]	; (8001678 <IPS_st7789_WriteU16+0x328>)
 800166e:	701a      	strb	r2, [r3, #0]
 }
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}
 8001678:	20000198 	.word	0x20000198

0800167c <IPS_st7789_WriteF>:
 	 IPS_st7789_WriteChar(x, y, edi_LCD + 0x30, font, color, bgcolor); flag = 1;
 	 Poz = x + font.width - 1;
  }

 void IPS_st7789_WriteF(uint16_t x, uint16_t y, float dig, FontDef font, uint16_t color, uint16_t bgcolor)
 {
 800167c:	b082      	sub	sp, #8
 800167e:	b580      	push	{r7, lr}
 8001680:	b08a      	sub	sp, #40	; 0x28
 8001682:	af04      	add	r7, sp, #16
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	4603      	mov	r3, r0
 800168a:	80fb      	strh	r3, [r7, #6]
 800168c:	460b      	mov	r3, r1
 800168e:	80bb      	strh	r3, [r7, #4]

	 	 int flag = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
	 	uint16_t zap = 2;
 8001694:	2302      	movs	r3, #2
 8001696:	827b      	strh	r3, [r7, #18]

	 	 int32_t cc = (int32_t)(dig * 100);
 8001698:	498d      	ldr	r1, [pc, #564]	; (80018d0 <IPS_st7789_WriteF+0x254>)
 800169a:	6838      	ldr	r0, [r7, #0]
 800169c:	f7ff fa84 	bl	8000ba8 <__aeabi_fmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fc46 	bl	8000f34 <__aeabi_f2iz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]
	 	 Preobr_LCD (cc);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fc65 	bl	8000f80 <Preobr_LCD>
		 IPS_st7789_WriteChar(x                     , y, ' ', font, color, bgcolor);
 80016b6:	88b9      	ldrh	r1, [r7, #4]
 80016b8:	88f8      	ldrh	r0, [r7, #6]
 80016ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	2220      	movs	r2, #32
 80016ca:	f7ff fdc9 	bl	8001260 <IPS_st7789_WriteChar>
		 IPS_st7789_WriteChar(x +     font.width - 1, y, ' ', font, color, bgcolor);
 80016ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	4413      	add	r3, r2
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b298      	uxth	r0, r3
 80016de:	88b9      	ldrh	r1, [r7, #4]
 80016e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80016e2:	9302      	str	r3, [sp, #8]
 80016e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	2220      	movs	r2, #32
 80016f0:	f7ff fdb6 	bl	8001260 <IPS_st7789_WriteChar>
		 IPS_st7789_WriteChar(x + 2 * font.width - 1, y, ' ', font, color, bgcolor);
 80016f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	4413      	add	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b298      	uxth	r0, r3
 8001708:	88b9      	ldrh	r1, [r7, #4]
 800170a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	2220      	movs	r2, #32
 800171a:	f7ff fda1 	bl	8001260 <IPS_st7789_WriteChar>
		 IPS_st7789_WriteChar(x + 3 * font.width - 1, y, ' ', font, color, bgcolor);
 800171e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001722:	b29b      	uxth	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	0052      	lsls	r2, r2, #1
 8001728:	4413      	add	r3, r2
 800172a:	b29a      	uxth	r2, r3
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	4413      	add	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b298      	uxth	r0, r3
 8001736:	88b9      	ldrh	r1, [r7, #4]
 8001738:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	2220      	movs	r2, #32
 8001748:	f7ff fd8a 	bl	8001260 <IPS_st7789_WriteChar>
		 IPS_st7789_WriteChar(x + 4 * font.width - 1, y, ' ', font, color, bgcolor);
 800174c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001750:	b29b      	uxth	r3, r3
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	b29a      	uxth	r2, r3
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b298      	uxth	r0, r3
 8001760:	88b9      	ldrh	r1, [r7, #4]
 8001762:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001764:	9302      	str	r3, [sp, #8]
 8001766:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	2220      	movs	r2, #32
 8001772:	f7ff fd75 	bl	8001260 <IPS_st7789_WriteChar>
		 IPS_st7789_WriteChar(x + 5 * font.width - 1, y, ' ', font, color, bgcolor);
 8001776:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800177a:	b29b      	uxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4413      	add	r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	4413      	add	r3, r2
 8001788:	b29b      	uxth	r3, r3
 800178a:	3b01      	subs	r3, #1
 800178c:	b298      	uxth	r0, r3
 800178e:	88b9      	ldrh	r1, [r7, #4]
 8001790:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001792:	9302      	str	r3, [sp, #8]
 8001794:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	2220      	movs	r2, #32
 80017a0:	f7ff fd5e 	bl	8001260 <IPS_st7789_WriteChar>



		 	 if((sts_LCD) || (zap == 5))           {IPS_st7789_WriteChar(x, y, sts_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <IPS_st7789_WriteF+0x258>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <IPS_st7789_WriteF+0x136>
 80017ac:	8a7b      	ldrh	r3, [r7, #18]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d118      	bne.n	80017e4 <IPS_st7789_WriteF+0x168>
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <IPS_st7789_WriteF+0x258>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3330      	adds	r3, #48	; 0x30
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	88b9      	ldrh	r1, [r7, #4]
 80017bc:	88f8      	ldrh	r0, [r7, #6]
 80017be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f7ff fd48 	bl	8001260 <IPS_st7789_WriteChar>
 80017d0:	2301      	movs	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d8:	b29a      	uxth	r2, r3
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	4413      	add	r3, r2
 80017de:	b29b      	uxth	r3, r3
 80017e0:	3b01      	subs	r3, #1
 80017e2:	80fb      	strh	r3, [r7, #6]
			 if(zap == 5){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 80017e4:	8a7b      	ldrh	r3, [r7, #18]
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d113      	bne.n	8001812 <IPS_st7789_WriteF+0x196>
 80017ea:	88b9      	ldrh	r1, [r7, #4]
 80017ec:	88f8      	ldrh	r0, [r7, #6]
 80017ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	222c      	movs	r2, #44	; 0x2c
 80017fe:	f7ff fd2f 	bl	8001260 <IPS_st7789_WriteChar>
 8001802:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001806:	b29a      	uxth	r2, r3
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	4413      	add	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	3b01      	subs	r3, #1
 8001810:	80fb      	strh	r3, [r7, #6]
			 if((dts_LCD) || (flag) || (zap == 4)) {IPS_st7789_WriteChar(x, y, dts_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 8001812:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <IPS_st7789_WriteF+0x25c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <IPS_st7789_WriteF+0x1aa>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <IPS_st7789_WriteF+0x1aa>
 8001820:	8a7b      	ldrh	r3, [r7, #18]
 8001822:	2b04      	cmp	r3, #4
 8001824:	d118      	bne.n	8001858 <IPS_st7789_WriteF+0x1dc>
 8001826:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <IPS_st7789_WriteF+0x25c>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3330      	adds	r3, #48	; 0x30
 800182c:	b2da      	uxtb	r2, r3
 800182e:	88b9      	ldrh	r1, [r7, #4]
 8001830:	88f8      	ldrh	r0, [r7, #6]
 8001832:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f7ff fd0e 	bl	8001260 <IPS_st7789_WriteChar>
 8001844:	2301      	movs	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800184c:	b29a      	uxth	r2, r3
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4413      	add	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	80fb      	strh	r3, [r7, #6]
			 if(zap == 4){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 8001858:	8a7b      	ldrh	r3, [r7, #18]
 800185a:	2b04      	cmp	r3, #4
 800185c:	d113      	bne.n	8001886 <IPS_st7789_WriteF+0x20a>
 800185e:	88b9      	ldrh	r1, [r7, #4]
 8001860:	88f8      	ldrh	r0, [r7, #6]
 8001862:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	222c      	movs	r2, #44	; 0x2c
 8001872:	f7ff fcf5 	bl	8001260 <IPS_st7789_WriteChar>
 8001876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800187a:	b29a      	uxth	r2, r3
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	4413      	add	r3, r2
 8001880:	b29b      	uxth	r3, r3
 8001882:	3b01      	subs	r3, #1
 8001884:	80fb      	strh	r3, [r7, #6]
			 if((tis_LCD) || (flag) || (zap == 3)) {IPS_st7789_WriteChar(x, y, tis_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <IPS_st7789_WriteF+0x260>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <IPS_st7789_WriteF+0x21e>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <IPS_st7789_WriteF+0x21e>
 8001894:	8a7b      	ldrh	r3, [r7, #18]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d122      	bne.n	80018e0 <IPS_st7789_WriteF+0x264>
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <IPS_st7789_WriteF+0x260>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3330      	adds	r3, #48	; 0x30
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	88b9      	ldrh	r1, [r7, #4]
 80018a4:	88f8      	ldrh	r0, [r7, #6]
 80018a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	f7ff fcd4 	bl	8001260 <IPS_st7789_WriteChar>
 80018b8:	2301      	movs	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	3b01      	subs	r3, #1
 80018ca:	80fb      	strh	r3, [r7, #6]
 80018cc:	e008      	b.n	80018e0 <IPS_st7789_WriteF+0x264>
 80018ce:	bf00      	nop
 80018d0:	42c80000 	.word	0x42c80000
 80018d4:	20000039 	.word	0x20000039
 80018d8:	20000038 	.word	0x20000038
 80018dc:	20000037 	.word	0x20000037
			 if(zap == 3){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 80018e0:	8a7b      	ldrh	r3, [r7, #18]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d113      	bne.n	800190e <IPS_st7789_WriteF+0x292>
 80018e6:	88b9      	ldrh	r1, [r7, #4]
 80018e8:	88f8      	ldrh	r0, [r7, #6]
 80018ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	222c      	movs	r2, #44	; 0x2c
 80018fa:	f7ff fcb1 	bl	8001260 <IPS_st7789_WriteChar>
 80018fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001902:	b29a      	uxth	r2, r3
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	4413      	add	r3, r2
 8001908:	b29b      	uxth	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	80fb      	strh	r3, [r7, #6]
			 if((sot_LCD) || (flag) || (zap == 2)) {IPS_st7789_WriteChar(x, y, sot_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 800190e:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <IPS_st7789_WriteF+0x3c0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <IPS_st7789_WriteF+0x2a6>
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <IPS_st7789_WriteF+0x2a6>
 800191c:	8a7b      	ldrh	r3, [r7, #18]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d118      	bne.n	8001954 <IPS_st7789_WriteF+0x2d8>
 8001922:	4b46      	ldr	r3, [pc, #280]	; (8001a3c <IPS_st7789_WriteF+0x3c0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	3330      	adds	r3, #48	; 0x30
 8001928:	b2da      	uxtb	r2, r3
 800192a:	88b9      	ldrh	r1, [r7, #4]
 800192c:	88f8      	ldrh	r0, [r7, #6]
 800192e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f7ff fc90 	bl	8001260 <IPS_st7789_WriteChar>
 8001940:	2301      	movs	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001948:	b29a      	uxth	r2, r3
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	4413      	add	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	80fb      	strh	r3, [r7, #6]
			 if(zap == 2){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 8001954:	8a7b      	ldrh	r3, [r7, #18]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d113      	bne.n	8001982 <IPS_st7789_WriteF+0x306>
 800195a:	88b9      	ldrh	r1, [r7, #4]
 800195c:	88f8      	ldrh	r0, [r7, #6]
 800195e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	222c      	movs	r2, #44	; 0x2c
 800196e:	f7ff fc77 	bl	8001260 <IPS_st7789_WriteChar>
 8001972:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001976:	b29a      	uxth	r2, r3
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	4413      	add	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	3b01      	subs	r3, #1
 8001980:	80fb      	strh	r3, [r7, #6]
			 if((des_LCD) || (flag) || (zap == 1)) {IPS_st7789_WriteChar(x, y, des_LCD + 0x30, font, color, bgcolor); flag = 1;x +=font.width - 1;}
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <IPS_st7789_WriteF+0x3c4>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d105      	bne.n	8001996 <IPS_st7789_WriteF+0x31a>
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <IPS_st7789_WriteF+0x31a>
 8001990:	8a7b      	ldrh	r3, [r7, #18]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d118      	bne.n	80019c8 <IPS_st7789_WriteF+0x34c>
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <IPS_st7789_WriteF+0x3c4>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3330      	adds	r3, #48	; 0x30
 800199c:	b2da      	uxtb	r2, r3
 800199e:	88b9      	ldrh	r1, [r7, #4]
 80019a0:	88f8      	ldrh	r0, [r7, #6]
 80019a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f7ff fc56 	bl	8001260 <IPS_st7789_WriteChar>
 80019b4:	2301      	movs	r3, #1
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019bc:	b29a      	uxth	r2, r3
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4413      	add	r3, r2
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	80fb      	strh	r3, [r7, #6]
			 if(zap == 1){IPS_st7789_WriteChar(x, y, ',', font, color, bgcolor); x += font.width - 1;}
 80019c8:	8a7b      	ldrh	r3, [r7, #18]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d113      	bne.n	80019f6 <IPS_st7789_WriteF+0x37a>
 80019ce:	88b9      	ldrh	r1, [r7, #4]
 80019d0:	88f8      	ldrh	r0, [r7, #6]
 80019d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	222c      	movs	r2, #44	; 0x2c
 80019e2:	f7ff fc3d 	bl	8001260 <IPS_st7789_WriteChar>
 80019e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	80fb      	strh	r3, [r7, #6]
			                          IPS_st7789_WriteChar(x, y, edi_LCD + 0x30, font, color, bgcolor); flag = 1;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <IPS_st7789_WriteF+0x3c8>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	3330      	adds	r3, #48	; 0x30
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	88b9      	ldrh	r1, [r7, #4]
 8001a00:	88f8      	ldrh	r0, [r7, #6]
 8001a02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f7ff fc26 	bl	8001260 <IPS_st7789_WriteChar>
 8001a14:	2301      	movs	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
			 Poz = x + font.width - 1;
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a20:	4413      	add	r3, r2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <IPS_st7789_WriteF+0x3cc>)
 8001a2a:	701a      	strb	r2, [r3, #0]

 }
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a36:	b002      	add	sp, #8
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000036 	.word	0x20000036
 8001a40:	20000035 	.word	0x20000035
 8001a44:	20000034 	.word	0x20000034
 8001a48:	20000198 	.word	0x20000198

08001a4c <IPS_st7789_WriteString>:
    }
}
*/

void IPS_st7789_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af04      	add	r7, sp, #16
 8001a54:	603a      	str	r2, [r7, #0]
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	4603      	mov	r3, r0
 8001a5a:	80fb      	strh	r3, [r7, #6]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	80bb      	strh	r3, [r7, #4]

    while(*str) {
 8001a60:	e02d      	b.n	8001abe <IPS_st7789_WriteString+0x72>
        if(x + font.width >= ST7789_IPS_WIDTH_240) {
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	7d3a      	ldrb	r2, [r7, #20]
 8001a66:	4413      	add	r3, r2
 8001a68:	2bef      	cmp	r3, #239	; 0xef
 8001a6a:	dd13      	ble.n	8001a94 <IPS_st7789_WriteString+0x48>
            x = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001a70:	7d7b      	ldrb	r3, [r7, #21]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7789_IPS_WIDTH_240) {
 8001a7a:	88bb      	ldrh	r3, [r7, #4]
 8001a7c:	7d7a      	ldrb	r2, [r7, #21]
 8001a7e:	4413      	add	r3, r2
 8001a80:	2bef      	cmp	r3, #239	; 0xef
 8001a82:	dc21      	bgt.n	8001ac8 <IPS_st7789_WriteString+0x7c>
                break;
            }

            if(*str == ' ') {
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d103      	bne.n	8001a94 <IPS_st7789_WriteString+0x48>
                // skip spaces in the beginning of the new line
                str++;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	603b      	str	r3, [r7, #0]
                continue;
 8001a92:	e014      	b.n	8001abe <IPS_st7789_WriteString+0x72>
            }
        }

        IPS_st7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	88b9      	ldrh	r1, [r7, #4]
 8001a9a:	88f8      	ldrh	r0, [r7, #6]
 8001a9c:	8c3b      	ldrh	r3, [r7, #32]
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	8bbb      	ldrh	r3, [r7, #28]
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f7ff fbd9 	bl	8001260 <IPS_st7789_WriteChar>
        x += font.width;
 8001aae:	7d3b      	ldrb	r3, [r7, #20]
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
        str++;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1cd      	bne.n	8001a62 <IPS_st7789_WriteString+0x16>
    }
}
 8001ac6:	e000      	b.n	8001aca <IPS_st7789_WriteString+0x7e>
                break;
 8001ac8:	bf00      	nop
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ad4:	b002      	add	sp, #8
 8001ad6:	4770      	bx	lr

08001ad8 <IPS_st7789_FillScreen>:
    }

}


void IPS_st7789_FillScreen(uint16_t color) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]

	uint32_t i;
	uint8_t data[] = { color >> 8, color & 0xFF };
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	723b      	strb	r3, [r7, #8]
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	727b      	strb	r3, [r7, #9]

	IPS_st7789_SetAddressWindow(0, 0, ST7789_IPS_HEIGHT_240, ST7789_IPS_HEIGHT_240);
 8001af2:	23f0      	movs	r3, #240	; 0xf0
 8001af4:	22f0      	movs	r2, #240	; 0xf0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fb70 	bl	80011de <IPS_st7789_SetAddressWindow>
	for(i = 0; i < ST7789_IPS_HEIGHT_240 * ST7789_IPS_HEIGHT_240; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e008      	b.n	8001b16 <IPS_st7789_FillScreen+0x3e>
	{
		IPS_st7789_WriteData((uint8_t*)data,  sizeof(data));
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fb02 	bl	8001114 <IPS_st7789_WriteData>
	for(i = 0; i < ST7789_IPS_HEIGHT_240 * ST7789_IPS_HEIGHT_240; i++)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8001b1c:	d3f2      	bcc.n	8001b04 <IPS_st7789_FillScreen+0x2c>
	}

}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08e      	sub	sp, #56	; 0x38
 8001b2c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2e:	f001 f939 	bl	8002da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b32:	f000 fb17 	bl	8002164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b36:	f000 fd27 	bl	8002588 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b3a:	f000 fcfb 	bl	8002534 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001b3e:	f000 fb69 	bl	8002214 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001b42:	f000 fbdb 	bl	80022fc <MX_TIM1_Init>
  MX_SPI1_Init();
 8001b46:	f000 fba3 	bl	8002290 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001b4a:	f000 fc7b 	bl	8002444 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t counter = 0;
  int i;
 	 uint32_t adc_values[3];   //обявляем масив ОДНОМЕРНЫЙ из двух элементов
 	 uint32_t channels[3] =    //обявление масива с присвоением значений
 8001b4e:	4a2f      	ldr	r2, [pc, #188]	; (8001c0c <main+0xe4>)
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			ADC_CHANNEL_1,
			ADC_CHANNEL_2,
		};
	  ADC_ChannelConfTypeDef sConfig =
	  {
	    sConfig.Channel = ADC_CHANNEL_1,
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
	  ADC_ChannelConfTypeDef sConfig =
 8001b60:	603b      	str	r3, [r7, #0]
	    sConfig.Rank = ADC_REGULAR_RANK_1,
 8001b62:	2301      	movs	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig =
 8001b68:	607b      	str	r3, [r7, #4]
	    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5,
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
	  ADC_ChannelConfTypeDef sConfig =
 8001b70:	60bb      	str	r3, [r7, #8]
	  };



  	IPS_st7789_Init();
 8001b72:	f7ff fb69 	bl	8001248 <IPS_st7789_Init>
  	IPS_st7789_FillScreen(BLACK);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff ffae 	bl	8001ad8 <IPS_st7789_FillScreen>

  	IPS_st7789_WriteString(0, 35, "Ui", Font_16x26, WHITE,  BLACK);
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <main+0xe8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	9202      	str	r2, [sp, #8]
 8001b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b86:	9201      	str	r2, [sp, #4]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	9200      	str	r2, [sp, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <main+0xec>)
 8001b90:	2123      	movs	r1, #35	; 0x23
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff ff5a 	bl	8001a4c <IPS_st7789_WriteString>
  	IPS_st7789_WriteString(0, 70, "Uo", Font_16x26, WHITE,  BLACK);
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <main+0xe8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	9202      	str	r2, [sp, #8]
 8001b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	9200      	str	r2, [sp, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1b      	ldr	r2, [pc, #108]	; (8001c18 <main+0xf0>)
 8001bac:	2146      	movs	r1, #70	; 0x46
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff ff4c 	bl	8001a4c <IPS_st7789_WriteString>
  	IPS_st7789_WriteString(0, 105, "Io", Font_16x26, WHITE, BLACK);
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <main+0xe8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	9202      	str	r2, [sp, #8]
 8001bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bbe:	9201      	str	r2, [sp, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <main+0xf4>)
 8001bc8:	2169      	movs	r1, #105	; 0x69
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff ff3e 	bl	8001a4c <IPS_st7789_WriteString>
  	IPS_st7789_WriteString(0, 140, "pwm", Font_16x26, WHITE, BLACK);
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <main+0xe8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	9202      	str	r2, [sp, #8]
 8001bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bda:	9201      	str	r2, [sp, #4]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	9200      	str	r2, [sp, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <main+0xf8>)
 8001be4:	218c      	movs	r1, #140	; 0x8c
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff ff30 	bl	8001a4c <IPS_st7789_WriteString>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bec:	2108      	movs	r1, #8
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <main+0xfc>)
 8001bf0:	f003 f956 	bl	8004ea0 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
  	/////////////////////////////////////////////////////////////////////
  	if (ss < 1)
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <main+0x100>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 81fd 	bne.w	8001ff8 <main+0x4d0>
  	{
  			for (ssp = 0; ssp < 50; ssp ++)
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <main+0x104>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e1e1      	b.n	8001fca <main+0x4a2>
  			{
				for( i = 0; i < 3; i++)  																		// основий цикл
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e03a      	b.n	8001c82 <main+0x15a>
 8001c0c:	080063d0 	.word	0x080063d0
 8001c10:	20000000 	.word	0x20000000
 8001c14:	080063b8 	.word	0x080063b8
 8001c18:	080063bc 	.word	0x080063bc
 8001c1c:	080063c0 	.word	0x080063c0
 8001c20:	080063c4 	.word	0x080063c4
 8001c24:	200000c4 	.word	0x200000c4
 8001c28:	200001b0 	.word	0x200001b0
 8001c2c:	200001ac 	.word	0x200001ac
				{
					sConfig.Channel = channels[i];
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	3328      	adds	r3, #40	; 0x28
 8001c36:	443b      	add	r3, r7
 8001c38:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c3c:	603b      	str	r3, [r7, #0]
					if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){ Error_Handler();}
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4619      	mov	r1, r3
 8001c42:	48a9      	ldr	r0, [pc, #676]	; (8001ee8 <main+0x3c0>)
 8001c44:	f001 fbf8 	bl	8003438 <HAL_ADC_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <main+0x12a>
 8001c4e:	f000 fd13 	bl	8002678 <Error_Handler>
					HAL_ADC_Start(&hadc1);
 8001c52:	48a5      	ldr	r0, [pc, #660]	; (8001ee8 <main+0x3c0>)
 8001c54:	f001 fa04 	bl	8003060 <HAL_ADC_Start>
					HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c58:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5c:	48a2      	ldr	r0, [pc, #648]	; (8001ee8 <main+0x3c0>)
 8001c5e:	f001 fad9 	bl	8003214 <HAL_ADC_PollForConversion>
					adc_values[i] = HAL_ADC_GetValue(&hadc1);
 8001c62:	48a1      	ldr	r0, [pc, #644]	; (8001ee8 <main+0x3c0>)
 8001c64:	f001 fbdc 	bl	8003420 <HAL_ADC_GetValue>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	3328      	adds	r3, #40	; 0x28
 8001c70:	443b      	add	r3, r7
 8001c72:	f843 2c10 	str.w	r2, [r3, #-16]
					HAL_ADC_Stop(&hadc1);
 8001c76:	489c      	ldr	r0, [pc, #624]	; (8001ee8 <main+0x3c0>)
 8001c78:	f001 faa0 	bl	80031bc <HAL_ADC_Stop>
				for( i = 0; i < 3; i++)  																		// основий цикл
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	3301      	adds	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	ddd3      	ble.n	8001c30 <main+0x108>
				}

				Uin = adc_values[0];
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe ff34 	bl	8000af8 <__aeabi_ui2f>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a96      	ldr	r2, [pc, #600]	; (8001eec <main+0x3c4>)
 8001c94:	6013      	str	r3, [r2, #0]
				Uout = adc_values[1];
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ff2d 	bl	8000af8 <__aeabi_ui2f>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a93      	ldr	r2, [pc, #588]	; (8001ef0 <main+0x3c8>)
 8001ca2:	6013      	str	r3, [r2, #0]
				Io = adc_values[2];
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe ff26 	bl	8000af8 <__aeabi_ui2f>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a91      	ldr	r2, [pc, #580]	; (8001ef4 <main+0x3cc>)
 8001cb0:	6013      	str	r3, [r2, #0]

				x = (100.0 * Uout / 4095); Uout = x;  //Uout 44
 8001cb2:	4b8f      	ldr	r3, [pc, #572]	; (8001ef0 <main+0x3c8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fbae 	bl	8000418 <__aeabi_f2d>
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <main+0x3d0>)
 8001cc2:	f7fe fc01 	bl	80004c8 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	a384      	add	r3, pc, #528	; (adr r3, 8001ee0 <main+0x3b8>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fd22 	bl	800071c <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe fe04 	bl	80008ec <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a85      	ldr	r2, [pc, #532]	; (8001efc <main+0x3d4>)
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b84      	ldr	r3, [pc, #528]	; (8001efc <main+0x3d4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a80      	ldr	r2, [pc, #512]	; (8001ef0 <main+0x3c8>)
 8001cf0:	6013      	str	r3, [r2, #0]
				x = (100.0 * Uin / 4095); Uin = x;  //Uin 66
 8001cf2:	4b7e      	ldr	r3, [pc, #504]	; (8001eec <main+0x3c4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fb8e 	bl	8000418 <__aeabi_f2d>
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b7d      	ldr	r3, [pc, #500]	; (8001ef8 <main+0x3d0>)
 8001d02:	f7fe fbe1 	bl	80004c8 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	a374      	add	r3, pc, #464	; (adr r3, 8001ee0 <main+0x3b8>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fd02 	bl	800071c <__aeabi_ddiv>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	f7fe fde4 	bl	80008ec <__aeabi_d2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4a75      	ldr	r2, [pc, #468]	; (8001efc <main+0x3d4>)
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b74      	ldr	r3, [pc, #464]	; (8001efc <main+0x3d4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6f      	ldr	r2, [pc, #444]	; (8001eec <main+0x3c4>)
 8001d30:	6013      	str	r3, [r2, #0]

				if (Io < 1989){ poz = 0; x = 30-(30* Io / 1989); Io = x;}
 8001d32:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <main+0x3cc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4972      	ldr	r1, [pc, #456]	; (8001f00 <main+0x3d8>)
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f8d3 	bl	8000ee4 <__aeabi_fcmplt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01a      	beq.n	8001d7a <main+0x252>
 8001d44:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <main+0x3dc>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <main+0x3cc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	496e      	ldr	r1, [pc, #440]	; (8001f08 <main+0x3e0>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ff29 	bl	8000ba8 <__aeabi_fmul>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4969      	ldr	r1, [pc, #420]	; (8001f00 <main+0x3d8>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ffd8 	bl	8000d10 <__aeabi_fdiv>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4868      	ldr	r0, [pc, #416]	; (8001f08 <main+0x3e0>)
 8001d66:	f7fe fe15 	bl	8000994 <__aeabi_fsub>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b63      	ldr	r3, [pc, #396]	; (8001efc <main+0x3d4>)
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4b62      	ldr	r3, [pc, #392]	; (8001efc <main+0x3d4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a5f      	ldr	r2, [pc, #380]	; (8001ef4 <main+0x3cc>)
 8001d78:	6013      	str	r3, [r2, #0]
				if (Io > 1989){ poz = 1; x = Io - 1989; Io = x;	x = (30 * Io / 1989 ); Io = x;}
 8001d7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <main+0x3cc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4960      	ldr	r1, [pc, #384]	; (8001f00 <main+0x3d8>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f8cd 	bl	8000f20 <__aeabi_fcmpgt>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d023      	beq.n	8001dd4 <main+0x2ac>
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <main+0x3dc>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <main+0x3cc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	495a      	ldr	r1, [pc, #360]	; (8001f00 <main+0x3d8>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fdfb 	bl	8000994 <__aeabi_fsub>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b56      	ldr	r3, [pc, #344]	; (8001efc <main+0x3d4>)
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	4b55      	ldr	r3, [pc, #340]	; (8001efc <main+0x3d4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <main+0x3cc>)
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <main+0x3cc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4955      	ldr	r1, [pc, #340]	; (8001f08 <main+0x3e0>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fef7 	bl	8000ba8 <__aeabi_fmul>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4950      	ldr	r1, [pc, #320]	; (8001f00 <main+0x3d8>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe ffa6 	bl	8000d10 <__aeabi_fdiv>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <main+0x3d4>)
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <main+0x3d4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <main+0x3cc>)
 8001dd2:	6013      	str	r3, [r2, #0]

				if (Uin >= 68) {ss = 1; ssp = 50;}
 8001dd4:	4b45      	ldr	r3, [pc, #276]	; (8001eec <main+0x3c4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	494c      	ldr	r1, [pc, #304]	; (8001f0c <main+0x3e4>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f896 	bl	8000f0c <__aeabi_fcmpge>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <main+0x2ca>
 8001de6:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <main+0x3e8>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <main+0x3ec>)
 8001dee:	2232      	movs	r2, #50	; 0x32
 8001df0:	601a      	str	r2, [r3, #0]
				if (Uin <= 66) {ssp = 0;}
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <main+0x3c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4948      	ldr	r1, [pc, #288]	; (8001f18 <main+0x3f0>)
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f87d 	bl	8000ef8 <__aeabi_fcmple>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <main+0x2e2>
 8001e04:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <main+0x3ec>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

				IPS_st7789_WriteU16(0, 10, ss, 0, Font_16x26, YELLOW, BLACK); 		HAL_Delay(100);
 8001e0a:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <main+0x3e8>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	2300      	movs	r3, #0
 8001e12:	9303      	str	r3, [sp, #12]
 8001e14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	4940      	ldr	r1, [pc, #256]	; (8001f1c <main+0x3f4>)
 8001e1c:	466b      	mov	r3, sp
 8001e1e:	c903      	ldmia	r1, {r0, r1}
 8001e20:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e24:	2300      	movs	r3, #0
 8001e26:	210a      	movs	r1, #10
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7ff fa91 	bl	8001350 <IPS_st7789_WriteU16>
 8001e2e:	2064      	movs	r0, #100	; 0x64
 8001e30:	f001 f81a 	bl	8002e68 <HAL_Delay>
				IPS_st7789_WriteU16(30, 10, ssp, 0, Font_16x26, YELLOW, BLACK); 	HAL_Delay(100);
 8001e34:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <main+0x3ec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9303      	str	r3, [sp, #12]
 8001e3e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e42:	9302      	str	r3, [sp, #8]
 8001e44:	4935      	ldr	r1, [pc, #212]	; (8001f1c <main+0x3f4>)
 8001e46:	466b      	mov	r3, sp
 8001e48:	c903      	ldmia	r1, {r0, r1}
 8001e4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e4e:	2300      	movs	r3, #0
 8001e50:	210a      	movs	r1, #10
 8001e52:	201e      	movs	r0, #30
 8001e54:	f7ff fa7c 	bl	8001350 <IPS_st7789_WriteU16>
 8001e58:	2064      	movs	r0, #100	; 0x64
 8001e5a:	f001 f805 	bl	8002e68 <HAL_Delay>
				IPS_st7789_WriteF(75, 35, Uin, Font_16x26, YELLOW, BLACK);				HAL_Delay(100);
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <main+0x3c4>)
 8001e60:	6819      	ldr	r1, [r3, #0]
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <main+0x3f4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	9202      	str	r2, [sp, #8]
 8001e68:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e6c:	9201      	str	r2, [sp, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	9200      	str	r2, [sp, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	460a      	mov	r2, r1
 8001e76:	2123      	movs	r1, #35	; 0x23
 8001e78:	204b      	movs	r0, #75	; 0x4b
 8001e7a:	f7ff fbff 	bl	800167c <IPS_st7789_WriteF>
 8001e7e:	2064      	movs	r0, #100	; 0x64
 8001e80:	f000 fff2 	bl	8002e68 <HAL_Delay>
				IPS_st7789_WriteF(75, 70, Uout, Font_16x26, YELLOW, BLACK);				HAL_Delay(100);
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <main+0x3c8>)
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <main+0x3f4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	9202      	str	r2, [sp, #8]
 8001e8e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e92:	9201      	str	r2, [sp, #4]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	9200      	str	r2, [sp, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	460a      	mov	r2, r1
 8001e9c:	2146      	movs	r1, #70	; 0x46
 8001e9e:	204b      	movs	r0, #75	; 0x4b
 8001ea0:	f7ff fbec 	bl	800167c <IPS_st7789_WriteF>
 8001ea4:	2064      	movs	r0, #100	; 0x64
 8001ea6:	f000 ffdf 	bl	8002e68 <HAL_Delay>
				if (poz == 0){IPS_st7789_WriteString(58, 105, "+", Font_16x26, YELLOW, BLACK); 	HAL_Delay(100);
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <main+0x3dc>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d146      	bne.n	8001f40 <main+0x418>
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <main+0x3f4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	9202      	str	r2, [sp, #8]
 8001eb8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ebc:	9201      	str	r2, [sp, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	9200      	str	r2, [sp, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a16      	ldr	r2, [pc, #88]	; (8001f20 <main+0x3f8>)
 8001ec6:	2169      	movs	r1, #105	; 0x69
 8001ec8:	203a      	movs	r0, #58	; 0x3a
 8001eca:	f7ff fdbf 	bl	8001a4c <IPS_st7789_WriteString>
 8001ece:	2064      	movs	r0, #100	; 0x64
 8001ed0:	f000 ffca 	bl	8002e68 <HAL_Delay>
				IPS_st7789_WriteF(75, 105, Io, Font_16x26, YELLOW, BLACK);} 		HAL_Delay(100);
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <main+0x3cc>)
 8001ed6:	6819      	ldr	r1, [r3, #0]
 8001ed8:	e024      	b.n	8001f24 <main+0x3fc>
 8001eda:	bf00      	nop
 8001edc:	f3af 8000 	nop.w
 8001ee0:	00000000 	.word	0x00000000
 8001ee4:	40affe00 	.word	0x40affe00
 8001ee8:	2000003c 	.word	0x2000003c
 8001eec:	2000019c 	.word	0x2000019c
 8001ef0:	200001a0 	.word	0x200001a0
 8001ef4:	200001a4 	.word	0x200001a4
 8001ef8:	40590000 	.word	0x40590000
 8001efc:	200001a8 	.word	0x200001a8
 8001f00:	44f8a000 	.word	0x44f8a000
 8001f04:	200001b1 	.word	0x200001b1
 8001f08:	41f00000 	.word	0x41f00000
 8001f0c:	42880000 	.word	0x42880000
 8001f10:	200001b0 	.word	0x200001b0
 8001f14:	200001ac 	.word	0x200001ac
 8001f18:	42840000 	.word	0x42840000
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	080063c8 	.word	0x080063c8
 8001f24:	4b82      	ldr	r3, [pc, #520]	; (8002130 <main+0x608>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	9202      	str	r2, [sp, #8]
 8001f2a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f2e:	9201      	str	r2, [sp, #4]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	9200      	str	r2, [sp, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	460a      	mov	r2, r1
 8001f38:	2169      	movs	r1, #105	; 0x69
 8001f3a:	204b      	movs	r0, #75	; 0x4b
 8001f3c:	f7ff fb9e 	bl	800167c <IPS_st7789_WriteF>
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	f000 ff91 	bl	8002e68 <HAL_Delay>
				if (poz >= 1){IPS_st7789_WriteString(58, 105, "-", Font_16x26, YELLOW, BLACK); 	HAL_Delay(100);
 8001f46:	4b7b      	ldr	r3, [pc, #492]	; (8002134 <main+0x60c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d020      	beq.n	8001f90 <main+0x468>
 8001f4e:	4b78      	ldr	r3, [pc, #480]	; (8002130 <main+0x608>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	9202      	str	r2, [sp, #8]
 8001f54:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f58:	9201      	str	r2, [sp, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	9200      	str	r2, [sp, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a75      	ldr	r2, [pc, #468]	; (8002138 <main+0x610>)
 8001f62:	2169      	movs	r1, #105	; 0x69
 8001f64:	203a      	movs	r0, #58	; 0x3a
 8001f66:	f7ff fd71 	bl	8001a4c <IPS_st7789_WriteString>
 8001f6a:	2064      	movs	r0, #100	; 0x64
 8001f6c:	f000 ff7c 	bl	8002e68 <HAL_Delay>
				IPS_st7789_WriteF(75, 105, Io, Font_16x26, YELLOW, BLACK);} 		HAL_Delay(100);
 8001f70:	4b72      	ldr	r3, [pc, #456]	; (800213c <main+0x614>)
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	4b6e      	ldr	r3, [pc, #440]	; (8002130 <main+0x608>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	9202      	str	r2, [sp, #8]
 8001f7a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f7e:	9201      	str	r2, [sp, #4]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	9200      	str	r2, [sp, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	460a      	mov	r2, r1
 8001f88:	2169      	movs	r1, #105	; 0x69
 8001f8a:	204b      	movs	r0, #75	; 0x4b
 8001f8c:	f7ff fb76 	bl	800167c <IPS_st7789_WriteF>
 8001f90:	2064      	movs	r0, #100	; 0x64
 8001f92:	f000 ff69 	bl	8002e68 <HAL_Delay>
				IPS_st7789_WriteU16(75, 140, pwm, 0, Font_16x26, YELLOW, BLACK); 	HAL_Delay(100);
 8001f96:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <main+0x618>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9303      	str	r3, [sp, #12]
 8001fa0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	4962      	ldr	r1, [pc, #392]	; (8002130 <main+0x608>)
 8001fa8:	466b      	mov	r3, sp
 8001faa:	c903      	ldmia	r1, {r0, r1}
 8001fac:	e883 0003 	stmia.w	r3, {r0, r1}
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	218c      	movs	r1, #140	; 0x8c
 8001fb4:	204b      	movs	r0, #75	; 0x4b
 8001fb6:	f7ff f9cb 	bl	8001350 <IPS_st7789_WriteU16>
 8001fba:	2064      	movs	r0, #100	; 0x64
 8001fbc:	f000 ff54 	bl	8002e68 <HAL_Delay>
  			for (ssp = 0; ssp < 50; ssp ++)
 8001fc0:	4b60      	ldr	r3, [pc, #384]	; (8002144 <main+0x61c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	; (8002144 <main+0x61c>)
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <main+0x61c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b31      	cmp	r3, #49	; 0x31
 8001fd0:	f67f ae19 	bls.w	8001c06 <main+0xde>

			}


  			HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 8001fd4:	2108      	movs	r1, #8
 8001fd6:	485c      	ldr	r0, [pc, #368]	; (8002148 <main+0x620>)
 8001fd8:	f003 f804 	bl	8004fe4 <HAL_TIM_PWM_Start_IT>

  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001fdc:	2108      	movs	r1, #8
 8001fde:	485b      	ldr	r0, [pc, #364]	; (800214c <main+0x624>)
 8001fe0:	f002 ff5e 	bl	8004ea0 <HAL_TIM_PWM_Start>
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, pwm);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <main+0x624>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a55      	ldr	r2, [pc, #340]	; (8002140 <main+0x618>)
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	4857      	ldr	r0, [pc, #348]	; (8002150 <main+0x628>)
 8001ff4:	f001 fe46 	bl	8003c84 <HAL_GPIO_WritePin>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, SET); HAL_Delay(100);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffe:	4855      	ldr	r0, [pc, #340]	; (8002154 <main+0x62c>)
 8002000:	f001 fe40 	bl	8003c84 <HAL_GPIO_WritePin>
 8002004:	2064      	movs	r0, #100	; 0x64
 8002006:	f000 ff2f 	bl	8002e68 <HAL_Delay>

//  	IPS_st7789_WriteU16(0, 10, ss, 0, Font_16x26, YELLOW, BLACK); 	HAL_Delay(100);
//  	IPS_st7789_WriteU16(30, 10, ssp, 0, Font_16x26, YELLOW, BLACK); HAL_Delay(100);
  	IPS_st7789_WriteF(75, 35, Uin, Font_16x26, YELLOW, BLACK); 			HAL_Delay(100);
 800200a:	4b53      	ldr	r3, [pc, #332]	; (8002158 <main+0x630>)
 800200c:	6819      	ldr	r1, [r3, #0]
 800200e:	4b48      	ldr	r3, [pc, #288]	; (8002130 <main+0x608>)
 8002010:	2200      	movs	r2, #0
 8002012:	9202      	str	r2, [sp, #8]
 8002014:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002018:	9201      	str	r2, [sp, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	9200      	str	r2, [sp, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	460a      	mov	r2, r1
 8002022:	2123      	movs	r1, #35	; 0x23
 8002024:	204b      	movs	r0, #75	; 0x4b
 8002026:	f7ff fb29 	bl	800167c <IPS_st7789_WriteF>
 800202a:	2064      	movs	r0, #100	; 0x64
 800202c:	f000 ff1c 	bl	8002e68 <HAL_Delay>
  	IPS_st7789_WriteF(75, 70, Uout, Font_16x26, YELLOW, BLACK); 		HAL_Delay(100);
 8002030:	4b4a      	ldr	r3, [pc, #296]	; (800215c <main+0x634>)
 8002032:	6819      	ldr	r1, [r3, #0]
 8002034:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <main+0x608>)
 8002036:	2200      	movs	r2, #0
 8002038:	9202      	str	r2, [sp, #8]
 800203a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800203e:	9201      	str	r2, [sp, #4]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	9200      	str	r2, [sp, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	460a      	mov	r2, r1
 8002048:	2146      	movs	r1, #70	; 0x46
 800204a:	204b      	movs	r0, #75	; 0x4b
 800204c:	f7ff fb16 	bl	800167c <IPS_st7789_WriteF>
 8002050:	2064      	movs	r0, #100	; 0x64
 8002052:	f000 ff09 	bl	8002e68 <HAL_Delay>
  	if (poz == 0){IPS_st7789_WriteString(58, 105, "+", Font_16x26, YELLOW, BLACK); 	HAL_Delay(100);
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <main+0x60c>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d120      	bne.n	80020a0 <main+0x578>
 800205e:	4b34      	ldr	r3, [pc, #208]	; (8002130 <main+0x608>)
 8002060:	2200      	movs	r2, #0
 8002062:	9202      	str	r2, [sp, #8]
 8002064:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002068:	9201      	str	r2, [sp, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	9200      	str	r2, [sp, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <main+0x638>)
 8002072:	2169      	movs	r1, #105	; 0x69
 8002074:	203a      	movs	r0, #58	; 0x3a
 8002076:	f7ff fce9 	bl	8001a4c <IPS_st7789_WriteString>
 800207a:	2064      	movs	r0, #100	; 0x64
 800207c:	f000 fef4 	bl	8002e68 <HAL_Delay>
		IPS_st7789_WriteF(75, 105, Io, Font_16x26, YELLOW, BLACK);} 		HAL_Delay(100);
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <main+0x614>)
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <main+0x608>)
 8002086:	2200      	movs	r2, #0
 8002088:	9202      	str	r2, [sp, #8]
 800208a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800208e:	9201      	str	r2, [sp, #4]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	9200      	str	r2, [sp, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	460a      	mov	r2, r1
 8002098:	2169      	movs	r1, #105	; 0x69
 800209a:	204b      	movs	r0, #75	; 0x4b
 800209c:	f7ff faee 	bl	800167c <IPS_st7789_WriteF>
 80020a0:	2064      	movs	r0, #100	; 0x64
 80020a2:	f000 fee1 	bl	8002e68 <HAL_Delay>
  	if (poz >= 1){IPS_st7789_WriteString(58, 105, "-", Font_16x26, YELLOW, BLACK); 	HAL_Delay(100);
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <main+0x60c>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d020      	beq.n	80020f0 <main+0x5c8>
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <main+0x608>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	9202      	str	r2, [sp, #8]
 80020b4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80020b8:	9201      	str	r2, [sp, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	9200      	str	r2, [sp, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <main+0x610>)
 80020c2:	2169      	movs	r1, #105	; 0x69
 80020c4:	203a      	movs	r0, #58	; 0x3a
 80020c6:	f7ff fcc1 	bl	8001a4c <IPS_st7789_WriteString>
 80020ca:	2064      	movs	r0, #100	; 0x64
 80020cc:	f000 fecc 	bl	8002e68 <HAL_Delay>
		IPS_st7789_WriteF(75, 105, Io, Font_16x26, YELLOW, BLACK);} 		HAL_Delay(100);
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <main+0x614>)
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	4b16      	ldr	r3, [pc, #88]	; (8002130 <main+0x608>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	9202      	str	r2, [sp, #8]
 80020da:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80020de:	9201      	str	r2, [sp, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	9200      	str	r2, [sp, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	460a      	mov	r2, r1
 80020e8:	2169      	movs	r1, #105	; 0x69
 80020ea:	204b      	movs	r0, #75	; 0x4b
 80020ec:	f7ff fac6 	bl	800167c <IPS_st7789_WriteF>
 80020f0:	2064      	movs	r0, #100	; 0x64
 80020f2:	f000 feb9 	bl	8002e68 <HAL_Delay>
		IPS_st7789_WriteU16(75, 140, pwm, 0, Font_16x26, YELLOW, BLACK);
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <main+0x618>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	2300      	movs	r3, #0
 80020fe:	9303      	str	r3, [sp, #12]
 8002100:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <main+0x608>)
 8002108:	466b      	mov	r3, sp
 800210a:	c903      	ldmia	r1, {r0, r1}
 800210c:	e883 0003 	stmia.w	r3, {r0, r1}
 8002110:	2300      	movs	r3, #0
 8002112:	218c      	movs	r1, #140	; 0x8c
 8002114:	204b      	movs	r0, #75	; 0x4b
 8002116:	f7ff f91b 	bl	8001350 <IPS_st7789_WriteU16>

		HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, RESET); HAL_Delay(100);
 800211a:	2200      	movs	r2, #0
 800211c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002120:	480c      	ldr	r0, [pc, #48]	; (8002154 <main+0x62c>)
 8002122:	f001 fdaf 	bl	8003c84 <HAL_GPIO_WritePin>
 8002126:	2064      	movs	r0, #100	; 0x64
 8002128:	f000 fe9e 	bl	8002e68 <HAL_Delay>
  	if (ss < 1)
 800212c:	e562      	b.n	8001bf4 <main+0xcc>
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000
 8002134:	200001b1 	.word	0x200001b1
 8002138:	080063cc 	.word	0x080063cc
 800213c:	200001a4 	.word	0x200001a4
 8002140:	20000008 	.word	0x20000008
 8002144:	200001ac 	.word	0x200001ac
 8002148:	2000010c 	.word	0x2000010c
 800214c:	200000c4 	.word	0x200000c4
 8002150:	40010c00 	.word	0x40010c00
 8002154:	40011000 	.word	0x40011000
 8002158:	2000019c 	.word	0x2000019c
 800215c:	200001a0 	.word	0x200001a0
 8002160:	080063c8 	.word	0x080063c8

08002164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b094      	sub	sp, #80	; 0x50
 8002168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800216e:	2228      	movs	r2, #40	; 0x28
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f90c 	bl	8006390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002198:	2301      	movs	r3, #1
 800219a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800219c:	2310      	movs	r3, #16
 800219e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a0:	2302      	movs	r3, #2
 80021a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80021a4:	2300      	movs	r3, #0
 80021a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80021a8:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80021ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fd7e 	bl	8003cb4 <HAL_RCC_OscConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80021be:	f000 fa5b 	bl	8002678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c2:	230f      	movs	r3, #15
 80021c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2102      	movs	r1, #2
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 ffea 	bl	80041b8 <HAL_RCC_ClockConfig>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80021ea:	f000 fa45 	bl	8002678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021ee:	2302      	movs	r3, #2
 80021f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80021f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 f974 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002206:	f000 fa37 	bl	8002678 <Error_Handler>
  }
}
 800220a:	bf00      	nop
 800220c:	3750      	adds	r7, #80	; 0x50
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_ADC1_Init+0x74>)
 8002226:	4a19      	ldr	r2, [pc, #100]	; (800228c <MX_ADC1_Init+0x78>)
 8002228:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_ADC1_Init+0x74>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002230:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_ADC1_Init+0x74>)
 8002232:	2200      	movs	r2, #0
 8002234:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_ADC1_Init+0x74>)
 8002238:	2200      	movs	r2, #0
 800223a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MX_ADC1_Init+0x74>)
 800223e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002242:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_ADC1_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_ADC1_Init+0x74>)
 800224c:	2201      	movs	r2, #1
 800224e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <MX_ADC1_Init+0x74>)
 8002252:	f000 fe2d 	bl	8002eb0 <HAL_ADC_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800225c:	f000 fa0c 	bl	8002678 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002260:	2300      	movs	r3, #0
 8002262:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002264:	2301      	movs	r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002268:	2307      	movs	r3, #7
 800226a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_ADC1_Init+0x74>)
 8002272:	f001 f8e1 	bl	8003438 <HAL_ADC_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800227c:	f000 f9fc 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000003c 	.word	0x2000003c
 800228c:	40012400 	.word	0x40012400

08002290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <MX_SPI1_Init+0x64>)
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <MX_SPI1_Init+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_SPI1_Init+0x64>)
 800229c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022b0:	2202      	movs	r2, #2
 80022b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022c4:	2208      	movs	r2, #8
 80022c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022dc:	220a      	movs	r2, #10
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_SPI1_Init+0x64>)
 80022e2:	f002 fa77 	bl	80047d4 <HAL_SPI_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022ec:	f000 f9c4 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000006c 	.word	0x2000006c
 80022f8:	40013000 	.word	0x40013000

080022fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b096      	sub	sp, #88	; 0x58
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002302:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]
 8002310:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800231c:	f107 0320 	add.w	r3, r7, #32
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002330:	463b      	mov	r3, r7
 8002332:	2220      	movs	r2, #32
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f004 f82a 	bl	8006390 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800233c:	4b3f      	ldr	r3, [pc, #252]	; (800243c <MX_TIM1_Init+0x140>)
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <MX_TIM1_Init+0x144>)
 8002340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <MX_TIM1_Init+0x140>)
 8002344:	2200      	movs	r2, #0
 8002346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002348:	4b3c      	ldr	r3, [pc, #240]	; (800243c <MX_TIM1_Init+0x140>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1200;
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <MX_TIM1_Init+0x140>)
 8002350:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002356:	4b39      	ldr	r3, [pc, #228]	; (800243c <MX_TIM1_Init+0x140>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800235c:	4b37      	ldr	r3, [pc, #220]	; (800243c <MX_TIM1_Init+0x140>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002362:	4b36      	ldr	r3, [pc, #216]	; (800243c <MX_TIM1_Init+0x140>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002368:	4834      	ldr	r0, [pc, #208]	; (800243c <MX_TIM1_Init+0x140>)
 800236a:	f002 fc99 	bl	8004ca0 <HAL_TIM_Base_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002374:	f000 f980 	bl	8002678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002378:	4830      	ldr	r0, [pc, #192]	; (800243c <MX_TIM1_Init+0x140>)
 800237a:	f002 fd38 	bl	8004dee <HAL_TIM_PWM_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002384:	f000 f978 	bl	8002678 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800238c:	2300      	movs	r3, #0
 800238e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002390:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002394:	4619      	mov	r1, r3
 8002396:	4829      	ldr	r0, [pc, #164]	; (800243c <MX_TIM1_Init+0x140>)
 8002398:	f003 fa98 	bl	80058cc <HAL_TIM_SlaveConfigSynchro>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80023a2:	f000 f969 	bl	8002678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023b2:	4619      	mov	r1, r3
 80023b4:	4821      	ldr	r0, [pc, #132]	; (800243c <MX_TIM1_Init+0x140>)
 80023b6:	f003 fe2b 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80023c0:	f000 f95a 	bl	8002678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023c4:	2360      	movs	r3, #96	; 0x60
 80023c6:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80023d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	2208      	movs	r2, #8
 80023e8:	4619      	mov	r1, r3
 80023ea:	4814      	ldr	r0, [pc, #80]	; (800243c <MX_TIM1_Init+0x140>)
 80023ec:	f003 f8ec 	bl	80055c8 <HAL_TIM_PWM_ConfigChannel>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80023f6:	f000 f93f 	bl	8002678 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800240e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002412:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002418:	463b      	mov	r3, r7
 800241a:	4619      	mov	r1, r3
 800241c:	4807      	ldr	r0, [pc, #28]	; (800243c <MX_TIM1_Init+0x140>)
 800241e:	f003 fe55 	bl	80060cc <HAL_TIMEx_ConfigBreakDeadTime>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002428:	f000 f926 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800242c:	4803      	ldr	r0, [pc, #12]	; (800243c <MX_TIM1_Init+0x140>)
 800242e:	f000 fa0b 	bl	8002848 <HAL_TIM_MspPostInit>

}
 8002432:	bf00      	nop
 8002434:	3758      	adds	r7, #88	; 0x58
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200000c4 	.word	0x200000c4
 8002440:	40012c00 	.word	0x40012c00

08002444 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	; 0x38
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	f107 0320 	add.w	r3, r7, #32
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
 8002470:	615a      	str	r2, [r3, #20]
 8002472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <MX_TIM4_Init+0xe8>)
 8002476:	4a2e      	ldr	r2, [pc, #184]	; (8002530 <MX_TIM4_Init+0xec>)
 8002478:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000;
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <MX_TIM4_Init+0xe8>)
 800247c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002480:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <MX_TIM4_Init+0xe8>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <MX_TIM4_Init+0xe8>)
 800248a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800248e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002490:	4b26      	ldr	r3, [pc, #152]	; (800252c <MX_TIM4_Init+0xe8>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002496:	4b25      	ldr	r3, [pc, #148]	; (800252c <MX_TIM4_Init+0xe8>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800249c:	4823      	ldr	r0, [pc, #140]	; (800252c <MX_TIM4_Init+0xe8>)
 800249e:	f002 fbff 	bl	8004ca0 <HAL_TIM_Base_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80024a8:	f000 f8e6 	bl	8002678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b6:	4619      	mov	r1, r3
 80024b8:	481c      	ldr	r0, [pc, #112]	; (800252c <MX_TIM4_Init+0xe8>)
 80024ba:	f003 f943 	bl	8005744 <HAL_TIM_ConfigClockSource>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80024c4:	f000 f8d8 	bl	8002678 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80024c8:	4818      	ldr	r0, [pc, #96]	; (800252c <MX_TIM4_Init+0xe8>)
 80024ca:	f002 fc38 	bl	8004d3e <HAL_TIM_OC_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80024d4:	f000 f8d0 	bl	8002678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024e0:	f107 0320 	add.w	r3, r7, #32
 80024e4:	4619      	mov	r1, r3
 80024e6:	4811      	ldr	r0, [pc, #68]	; (800252c <MX_TIM4_Init+0xe8>)
 80024e8:	f003 fd92 	bl	8006010 <HAL_TIMEx_MasterConfigSynchronization>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80024f2:	f000 f8c1 	bl	8002678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80024f6:	2330      	movs	r3, #48	; 0x30
 80024f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	2208      	movs	r2, #8
 800250a:	4619      	mov	r1, r3
 800250c:	4807      	ldr	r0, [pc, #28]	; (800252c <MX_TIM4_Init+0xe8>)
 800250e:	f003 f803 	bl	8005518 <HAL_TIM_OC_ConfigChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002518:	f000 f8ae 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800251c:	4803      	ldr	r0, [pc, #12]	; (800252c <MX_TIM4_Init+0xe8>)
 800251e:	f000 f993 	bl	8002848 <HAL_TIM_MspPostInit>

}
 8002522:	bf00      	nop
 8002524:	3738      	adds	r7, #56	; 0x38
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	2000010c 	.word	0x2000010c
 8002530:	40000800 	.word	0x40000800

08002534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <MX_USART1_UART_Init+0x50>)
 800253c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 8002540:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 800255a:	220c      	movs	r2, #12
 800255c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <MX_USART1_UART_Init+0x4c>)
 800256c:	f003 fe11 	bl	8006192 <HAL_UART_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002576:	f000 f87f 	bl	8002678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000154 	.word	0x20000154
 8002584:	40013800 	.word	0x40013800

08002588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258e:	f107 0310 	add.w	r3, r7, #16
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800259c:	4b32      	ldr	r3, [pc, #200]	; (8002668 <MX_GPIO_Init+0xe0>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a31      	ldr	r2, [pc, #196]	; (8002668 <MX_GPIO_Init+0xe0>)
 80025a2:	f043 0310 	orr.w	r3, r3, #16
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <MX_GPIO_Init+0xe0>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <MX_GPIO_Init+0xe0>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	; (8002668 <MX_GPIO_Init+0xe0>)
 80025ba:	f043 0304 	orr.w	r3, r3, #4
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <MX_GPIO_Init+0xe0>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <MX_GPIO_Init+0xe0>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a25      	ldr	r2, [pc, #148]	; (8002668 <MX_GPIO_Init+0xe0>)
 80025d2:	f043 0308 	orr.w	r3, r3, #8
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <MX_GPIO_Init+0xe0>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 80025e4:	2200      	movs	r2, #0
 80025e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025ea:	4820      	ldr	r0, [pc, #128]	; (800266c <MX_GPIO_Init+0xe4>)
 80025ec:	f001 fb4a 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, GPIO_PIN_RESET);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2102      	movs	r1, #2
 80025f4:	481e      	ldr	r0, [pc, #120]	; (8002670 <MX_GPIO_Init+0xe8>)
 80025f6:	f001 fb45 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_DC_Pin|IPS_Res_Pin, GPIO_PIN_RESET);
 80025fa:	2200      	movs	r2, #0
 80025fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002600:	481c      	ldr	r0, [pc, #112]	; (8002674 <MX_GPIO_Init+0xec>)
 8002602:	f001 fb3f 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8002606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2302      	movs	r3, #2
 8002616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 0310 	add.w	r3, r7, #16
 800261c:	4619      	mov	r1, r3
 800261e:	4813      	ldr	r0, [pc, #76]	; (800266c <MX_GPIO_Init+0xe4>)
 8002620:	f001 f9ac 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Pin */
  GPIO_InitStruct.Pin = SD_Pin;
 8002624:	2302      	movs	r3, #2
 8002626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2302      	movs	r3, #2
 8002632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	4619      	mov	r1, r3
 800263a:	480d      	ldr	r0, [pc, #52]	; (8002670 <MX_GPIO_Init+0xe8>)
 800263c:	f001 f99e 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pins : IPS_DC_Pin IPS_Res_Pin */
  GPIO_InitStruct.Pin = IPS_DC_Pin|IPS_Res_Pin;
 8002640:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002644:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002646:	2301      	movs	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2302      	movs	r3, #2
 8002650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 0310 	add.w	r3, r7, #16
 8002656:	4619      	mov	r1, r3
 8002658:	4806      	ldr	r0, [pc, #24]	; (8002674 <MX_GPIO_Init+0xec>)
 800265a:	f001 f98f 	bl	800397c <HAL_GPIO_Init>

}
 800265e:	bf00      	nop
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40011000 	.word	0x40011000
 8002670:	40010c00 	.word	0x40010c00
 8002674:	40010800 	.word	0x40010800

08002678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800267c:	b672      	cpsid	i
}
 800267e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
  while (1)
 8002680:	e7fe      	b.n	8002680 <Error_Handler+0x8>
	...

08002684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_MspInit+0x40>)
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_MspInit+0x40>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6193      	str	r3, [r2, #24]
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_MspInit+0x40>)
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_MspInit+0x40>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_MspInit+0x40>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	61d3      	str	r3, [r2, #28]
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_MspInit+0x40>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a14      	ldr	r2, [pc, #80]	; (8002734 <HAL_ADC_MspInit+0x6c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d121      	bne.n	800272c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_ADC_MspInit+0x70>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_ADC_MspInit+0x70>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_ADC_MspInit+0x70>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_ADC_MspInit+0x70>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <HAL_ADC_MspInit+0x70>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6193      	str	r3, [r2, #24]
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_ADC_MspInit+0x70>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Uin_Pin|Uout_Pin;
 8002718:	2303      	movs	r3, #3
 800271a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271c:	2303      	movs	r3, #3
 800271e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 0310 	add.w	r3, r7, #16
 8002724:	4619      	mov	r1, r3
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <HAL_ADC_MspInit+0x74>)
 8002728:	f001 f928 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800272c:	bf00      	nop
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40012400 	.word	0x40012400
 8002738:	40021000 	.word	0x40021000
 800273c:	40010800 	.word	0x40010800

08002740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_SPI_MspInit+0x88>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d12f      	bne.n	80027c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_SPI_MspInit+0x8c>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_SPI_MspInit+0x8c>)
 8002766:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_SPI_MspInit+0x8c>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_SPI_MspInit+0x8c>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a13      	ldr	r2, [pc, #76]	; (80027cc <HAL_SPI_MspInit+0x8c>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_SPI_MspInit+0x8c>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002790:	23a0      	movs	r3, #160	; 0xa0
 8002792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002798:	2303      	movs	r3, #3
 800279a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279c:	f107 0310 	add.w	r3, r7, #16
 80027a0:	4619      	mov	r1, r3
 80027a2:	480b      	ldr	r0, [pc, #44]	; (80027d0 <HAL_SPI_MspInit+0x90>)
 80027a4:	f001 f8ea 	bl	800397c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027a8:	2340      	movs	r3, #64	; 0x40
 80027aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	f107 0310 	add.w	r3, r7, #16
 80027b8:	4619      	mov	r1, r3
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <HAL_SPI_MspInit+0x90>)
 80027bc:	f001 f8de 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027c0:	bf00      	nop
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40013000 	.word	0x40013000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010800 	.word	0x40010800

080027d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_TIM_Base_MspInit+0x68>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10c      	bne.n	8002800 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <HAL_TIM_Base_MspInit+0x6c>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	4a15      	ldr	r2, [pc, #84]	; (8002840 <HAL_TIM_Base_MspInit+0x6c>)
 80027ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f0:	6193      	str	r3, [r2, #24]
 80027f2:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_TIM_Base_MspInit+0x6c>)
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027fe:	e018      	b.n	8002832 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_TIM_Base_MspInit+0x70>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d113      	bne.n	8002832 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_TIM_Base_MspInit+0x6c>)
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <HAL_TIM_Base_MspInit+0x6c>)
 8002810:	f043 0304 	orr.w	r3, r3, #4
 8002814:	61d3      	str	r3, [r2, #28]
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_TIM_Base_MspInit+0x6c>)
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	201e      	movs	r0, #30
 8002828:	f001 f871 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800282c:	201e      	movs	r0, #30
 800282e:	f001 f88a 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40012c00 	.word	0x40012c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40000800 	.word	0x40000800

08002848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_TIM_MspPostInit+0x98>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d119      	bne.n	800289c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002868:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_TIM_MspPostInit+0x9c>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	4a1d      	ldr	r2, [pc, #116]	; (80028e4 <HAL_TIM_MspPostInit+0x9c>)
 800286e:	f043 0304 	orr.w	r3, r3, #4
 8002872:	6193      	str	r3, [r2, #24]
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_TIM_MspPostInit+0x9c>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0304 	and.w	r3, r3, #4
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002884:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2302      	movs	r3, #2
 800288c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	4619      	mov	r1, r3
 8002894:	4814      	ldr	r0, [pc, #80]	; (80028e8 <HAL_TIM_MspPostInit+0xa0>)
 8002896:	f001 f871 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800289a:	e01d      	b.n	80028d8 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a12      	ldr	r2, [pc, #72]	; (80028ec <HAL_TIM_MspPostInit+0xa4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d118      	bne.n	80028d8 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_TIM_MspPostInit+0x9c>)
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_TIM_MspPostInit+0x9c>)
 80028ac:	f043 0308 	orr.w	r3, r3, #8
 80028b0:	6193      	str	r3, [r2, #24]
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_TIM_MspPostInit+0x9c>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2302      	movs	r3, #2
 80028ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028cc:	f107 0310 	add.w	r3, r7, #16
 80028d0:	4619      	mov	r1, r3
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <HAL_TIM_MspPostInit+0xa8>)
 80028d4:	f001 f852 	bl	800397c <HAL_GPIO_Init>
}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40010800 	.word	0x40010800
 80028ec:	40000800 	.word	0x40000800
 80028f0:	40010c00 	.word	0x40010c00

080028f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_UART_MspInit+0xa4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d13d      	bne.n	8002990 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_UART_MspInit+0xa8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_UART_MspInit+0xa8>)
 800291a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_UART_MspInit+0xa8>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_UART_MspInit+0xa8>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_UART_MspInit+0xa8>)
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_UART_MspInit+0xa8>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002944:	2340      	movs	r3, #64	; 0x40
 8002946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4812      	ldr	r0, [pc, #72]	; (80029a0 <HAL_UART_MspInit+0xac>)
 8002958:	f001 f810 	bl	800397c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	480c      	ldr	r0, [pc, #48]	; (80029a0 <HAL_UART_MspInit+0xac>)
 8002970:	f001 f804 	bl	800397c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_UART_MspInit+0xb0>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <HAL_UART_MspInit+0xb0>)
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40013800 	.word	0x40013800
 800299c:	40021000 	.word	0x40021000
 80029a0:	40010c00 	.word	0x40010c00
 80029a4:	40010000 	.word	0x40010000

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <NMI_Handler+0x4>

080029ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <HardFault_Handler+0x4>

080029b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <MemManage_Handler+0x4>

080029ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <BusFault_Handler+0x4>

080029c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <UsageFault_Handler+0x4>

080029c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ee:	f000 fa1f 	bl	8002e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0


	int i;

	uint32_t adc_values[3];   //обявляем масив ОДНОМЕРНЫЙ из двух элементов
	  uint32_t channels[3] =    //обявление масива с присвоением значений
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <TIM4_IRQHandler+0x30>)
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			ADC_CHANNEL_1,
			ADC_CHANNEL_2,
		};
	  ADC_ChannelConfTypeDef sConfig =
	  {
	    sConfig.Channel = ADC_CHANNEL_1,
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
	  ADC_ChannelConfTypeDef sConfig =
 8002a10:	603b      	str	r3, [r7, #0]
	    sConfig.Rank = ADC_REGULAR_RANK_1,
 8002a12:	2301      	movs	r3, #1
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig =
 8002a18:	607b      	str	r3, [r7, #4]
	    sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5,
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
	  ADC_ChannelConfTypeDef sConfig =
 8002a20:	60bb      	str	r3, [r7, #8]
	  };


	for( i = 0; i < 3; i++)  																		// основий цикл
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	e02a      	b.n	8002a7e <TIM4_IRQHandler+0x86>
 8002a28:	080063dc 	.word	0x080063dc
			{
				sConfig.Channel = channels[i];
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3328      	adds	r3, #40	; 0x28
 8002a32:	443b      	add	r3, r7
 8002a34:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002a38:	603b      	str	r3, [r7, #0]
				if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){ Error_Handler();}
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	48a2      	ldr	r0, [pc, #648]	; (8002cc8 <TIM4_IRQHandler+0x2d0>)
 8002a40:	f000 fcfa 	bl	8003438 <HAL_ADC_ConfigChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <TIM4_IRQHandler+0x56>
 8002a4a:	f7ff fe15 	bl	8002678 <Error_Handler>
				HAL_ADC_Start(&hadc1);
 8002a4e:	489e      	ldr	r0, [pc, #632]	; (8002cc8 <TIM4_IRQHandler+0x2d0>)
 8002a50:	f000 fb06 	bl	8003060 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	489b      	ldr	r0, [pc, #620]	; (8002cc8 <TIM4_IRQHandler+0x2d0>)
 8002a5a:	f000 fbdb 	bl	8003214 <HAL_ADC_PollForConversion>
				adc_values[i] = HAL_ADC_GetValue(&hadc1);
 8002a5e:	489a      	ldr	r0, [pc, #616]	; (8002cc8 <TIM4_IRQHandler+0x2d0>)
 8002a60:	f000 fcde 	bl	8003420 <HAL_ADC_GetValue>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	3328      	adds	r3, #40	; 0x28
 8002a6c:	443b      	add	r3, r7
 8002a6e:	f843 2c10 	str.w	r2, [r3, #-16]
				HAL_ADC_Stop(&hadc1);
 8002a72:	4895      	ldr	r0, [pc, #596]	; (8002cc8 <TIM4_IRQHandler+0x2d0>)
 8002a74:	f000 fba2 	bl	80031bc <HAL_ADC_Stop>
	for( i = 0; i < 3; i++)  																		// основий цикл
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	ddd3      	ble.n	8002a2c <TIM4_IRQHandler+0x34>
			}

			Uin = adc_values[0];
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fe f836 	bl	8000af8 <__aeabi_ui2f>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4a8f      	ldr	r2, [pc, #572]	; (8002ccc <TIM4_IRQHandler+0x2d4>)
 8002a90:	6013      	str	r3, [r2, #0]
			Uout = adc_values[1];
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe f82f 	bl	8000af8 <__aeabi_ui2f>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a8c      	ldr	r2, [pc, #560]	; (8002cd0 <TIM4_IRQHandler+0x2d8>)
 8002a9e:	6013      	str	r3, [r2, #0]
			Io =adc_values[2];
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe f828 	bl	8000af8 <__aeabi_ui2f>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4a8a      	ldr	r2, [pc, #552]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002aac:	6013      	str	r3, [r2, #0]
			Io = Io - 126;
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4989      	ldr	r1, [pc, #548]	; (8002cd8 <TIM4_IRQHandler+0x2e0>)
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd ff6d 	bl	8000994 <__aeabi_fsub>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002ac0:	601a      	str	r2, [r3, #0]


			x = (100.0 * Uout / 4095); Uout = x;  //Uout 42
 8002ac2:	4b83      	ldr	r3, [pc, #524]	; (8002cd0 <TIM4_IRQHandler+0x2d8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fca6 	bl	8000418 <__aeabi_f2d>
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	4b82      	ldr	r3, [pc, #520]	; (8002cdc <TIM4_IRQHandler+0x2e4>)
 8002ad2:	f7fd fcf9 	bl	80004c8 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	a378      	add	r3, pc, #480	; (adr r3, 8002cc0 <TIM4_IRQHandler+0x2c8>)
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f7fd fe1a 	bl	800071c <__aeabi_ddiv>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fd fefc 	bl	80008ec <__aeabi_d2f>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4a7a      	ldr	r2, [pc, #488]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a74      	ldr	r2, [pc, #464]	; (8002cd0 <TIM4_IRQHandler+0x2d8>)
 8002b00:	6013      	str	r3, [r2, #0]
			x = (100.0 * Uin / 4095); Uin = x;  //Uin 60
 8002b02:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <TIM4_IRQHandler+0x2d4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fc86 	bl	8000418 <__aeabi_f2d>
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <TIM4_IRQHandler+0x2e4>)
 8002b12:	f7fd fcd9 	bl	80004c8 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	a368      	add	r3, pc, #416	; (adr r3, 8002cc0 <TIM4_IRQHandler+0x2c8>)
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	f7fd fdfa 	bl	800071c <__aeabi_ddiv>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f7fd fedc 	bl	80008ec <__aeabi_d2f>
 8002b34:	4603      	mov	r3, r0
 8002b36:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b69      	ldr	r3, [pc, #420]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <TIM4_IRQHandler+0x2d4>)
 8002b40:	6013      	str	r3, [r2, #0]

			if (Io < 1989){ poz = 0; x = 30-(30* Io / 1989);
 8002b42:	4b64      	ldr	r3, [pc, #400]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4967      	ldr	r1, [pc, #412]	; (8002ce4 <TIM4_IRQHandler+0x2ec>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe f9cb 	bl	8000ee4 <__aeabi_fcmplt>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d025      	beq.n	8002ba0 <TIM4_IRQHandler+0x1a8>
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <TIM4_IRQHandler+0x2f0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4963      	ldr	r1, [pc, #396]	; (8002cec <TIM4_IRQHandler+0x2f4>)
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe f821 	bl	8000ba8 <__aeabi_fmul>
 8002b66:	4603      	mov	r3, r0
 8002b68:	495e      	ldr	r1, [pc, #376]	; (8002ce4 <TIM4_IRQHandler+0x2ec>)
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe f8d0 	bl	8000d10 <__aeabi_fdiv>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4619      	mov	r1, r3
 8002b74:	485d      	ldr	r0, [pc, #372]	; (8002cec <TIM4_IRQHandler+0x2f4>)
 8002b76:	f7fd ff0d 	bl	8000994 <__aeabi_fsub>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002b80:	601a      	str	r2, [r3, #0]
			Io = x; Io = Io - 1.5;}
 8002b82:	4b57      	ldr	r3, [pc, #348]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a53      	ldr	r2, [pc, #332]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b52      	ldr	r3, [pc, #328]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fefe 	bl	8000994 <__aeabi_fsub>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002b9e:	601a      	str	r2, [r3, #0]
			if (Io > 1989){ poz = 1; x = Io - 1989; Io = x;	x = (30 * Io / 1989 );
 8002ba0:	4b4c      	ldr	r3, [pc, #304]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	494f      	ldr	r1, [pc, #316]	; (8002ce4 <TIM4_IRQHandler+0x2ec>)
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe f9ba 	bl	8000f20 <__aeabi_fcmpgt>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02e      	beq.n	8002c10 <TIM4_IRQHandler+0x218>
 8002bb2:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <TIM4_IRQHandler+0x2f0>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	701a      	strb	r2, [r3, #0]
 8002bb8:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4949      	ldr	r1, [pc, #292]	; (8002ce4 <TIM4_IRQHandler+0x2ec>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fd fee8 	bl	8000994 <__aeabi_fsub>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b45      	ldr	r3, [pc, #276]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4944      	ldr	r1, [pc, #272]	; (8002cec <TIM4_IRQHandler+0x2f4>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd ffe4 	bl	8000ba8 <__aeabi_fmul>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4940      	ldr	r1, [pc, #256]	; (8002ce4 <TIM4_IRQHandler+0x2ec>)
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe f893 	bl	8000d10 <__aeabi_fdiv>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b3c      	ldr	r3, [pc, #240]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002bf0:	601a      	str	r2, [r3, #0]
			Io = x; Io = Io + 1.5;}
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	; (8002ce0 <TIM4_IRQHandler+0x2e8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a37      	ldr	r2, [pc, #220]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fec8 	bl	8000998 <__addsf3>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <TIM4_IRQHandler+0x2dc>)
 8002c0e:	601a      	str	r2, [r3, #0]
	//		if (Uout >= 44) {pwm --;}
		//	if (Uin <= 60) {ss = 0; HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_3);}
			//x = (900 * Uin / 100); pwm = x;


			if (Uout <=42)  {pwm ++ ;}
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <TIM4_IRQHandler+0x2d8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4936      	ldr	r1, [pc, #216]	; (8002cf0 <TIM4_IRQHandler+0x2f8>)
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f96e 	bl	8000ef8 <__aeabi_fcmple>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <TIM4_IRQHandler+0x234>
 8002c22:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	4a32      	ldr	r2, [pc, #200]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c2a:	6013      	str	r3, [r2, #0]
			if (Uout >=43)  {pwm -- ;}
 8002c2c:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <TIM4_IRQHandler+0x2d8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4931      	ldr	r1, [pc, #196]	; (8002cf8 <TIM4_IRQHandler+0x300>)
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f96a 	bl	8000f0c <__aeabi_fcmpge>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <TIM4_IRQHandler+0x250>
 8002c3e:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	4a2b      	ldr	r2, [pc, #172]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c46:	6013      	str	r3, [r2, #0]
			if (Uin <= 66)  {pwm -- ; pwm --;}
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <TIM4_IRQHandler+0x2d4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	492b      	ldr	r1, [pc, #172]	; (8002cfc <TIM4_IRQHandler+0x304>)
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe f952 	bl	8000ef8 <__aeabi_fcmple>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <TIM4_IRQHandler+0x276>
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	4a22      	ldr	r2, [pc, #136]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c6c:	6013      	str	r3, [r2, #0]
			if (Uin <= 55)  {ss = 0;ssp = 0;pwm = 300;
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <TIM4_IRQHandler+0x2d4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4923      	ldr	r1, [pc, #140]	; (8002d00 <TIM4_IRQHandler+0x308>)
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe f93f 	bl	8000ef8 <__aeabi_fcmple>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d012      	beq.n	8002ca6 <TIM4_IRQHandler+0x2ae>
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <TIM4_IRQHandler+0x30c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <TIM4_IRQHandler+0x310>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002c8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c92:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_3);
 8002c94:	2108      	movs	r1, #8
 8002c96:	481d      	ldr	r0, [pc, #116]	; (8002d0c <TIM4_IRQHandler+0x314>)
 8002c98:	f002 fa8c 	bl	80051b4 <HAL_TIM_PWM_Stop_IT>
			HAL_GPIO_WritePin(SD_GPIO_Port, SD_Pin, RESET);}
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	481b      	ldr	r0, [pc, #108]	; (8002d10 <TIM4_IRQHandler+0x318>)
 8002ca2:	f000 ffef 	bl	8003c84 <HAL_GPIO_WritePin>


			if (pwm <= 300)	{pwm = 300;}
 8002ca6:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002cae:	d831      	bhi.n	8002d14 <TIM4_IRQHandler+0x31c>
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <TIM4_IRQHandler+0x2fc>)
 8002cb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e02c      	b.n	8002d14 <TIM4_IRQHandler+0x31c>
 8002cba:	bf00      	nop
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	00000000 	.word	0x00000000
 8002cc4:	40affe00 	.word	0x40affe00
 8002cc8:	2000003c 	.word	0x2000003c
 8002ccc:	2000019c 	.word	0x2000019c
 8002cd0:	200001a0 	.word	0x200001a0
 8002cd4:	200001a4 	.word	0x200001a4
 8002cd8:	42fc0000 	.word	0x42fc0000
 8002cdc:	40590000 	.word	0x40590000
 8002ce0:	200001a8 	.word	0x200001a8
 8002ce4:	44f8a000 	.word	0x44f8a000
 8002ce8:	200001b1 	.word	0x200001b1
 8002cec:	41f00000 	.word	0x41f00000
 8002cf0:	42280000 	.word	0x42280000
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	422c0000 	.word	0x422c0000
 8002cfc:	42840000 	.word	0x42840000
 8002d00:	425c0000 	.word	0x425c0000
 8002d04:	200001b0 	.word	0x200001b0
 8002d08:	200001ac 	.word	0x200001ac
 8002d0c:	2000010c 	.word	0x2000010c
 8002d10:	40010c00 	.word	0x40010c00
			if (pwm >= 980) {pwm = 980;}
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <TIM4_IRQHandler+0x348>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f5b3 7f75 	cmp.w	r3, #980	; 0x3d4
 8002d1c:	d303      	bcc.n	8002d26 <TIM4_IRQHandler+0x32e>
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <TIM4_IRQHandler+0x348>)
 8002d20:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8002d24:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, pwm);
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <TIM4_IRQHandler+0x34c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <TIM4_IRQHandler+0x348>)
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d30:	4805      	ldr	r0, [pc, #20]	; (8002d48 <TIM4_IRQHandler+0x350>)
 8002d32:	f002 fae9 	bl	8005308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	3728      	adds	r7, #40	; 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000008 	.word	0x20000008
 8002d44:	200000c4 	.word	0x200000c4
 8002d48:	2000010c 	.word	0x2000010c

08002d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d5a:	490d      	ldr	r1, [pc, #52]	; (8002d90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	; (8002d94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d60:	e002      	b.n	8002d68 <LoopCopyDataInit>

08002d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d66:	3304      	adds	r3, #4

08002d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d6c:	d3f9      	bcc.n	8002d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d70:	4c0a      	ldr	r4, [pc, #40]	; (8002d9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d74:	e001      	b.n	8002d7a <LoopFillZerobss>

08002d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d78:	3204      	adds	r2, #4

08002d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d7c:	d3fb      	bcc.n	8002d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d7e:	f7ff ffe5 	bl	8002d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d82:	f003 fae1 	bl	8006348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d86:	f7fe fecf 	bl	8001b28 <main>
  bx lr
 8002d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d90:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002d94:	08007798 	.word	0x08007798
  ldr r2, =_sbss
 8002d98:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002d9c:	200001b8 	.word	0x200001b8

08002da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002da0:	e7fe      	b.n	8002da0 <ADC1_2_IRQHandler>
	...

08002da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_Init+0x28>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_Init+0x28>)
 8002dae:	f043 0310 	orr.w	r3, r3, #16
 8002db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db4:	2003      	movs	r0, #3
 8002db6:	f000 fd9f 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dba:	200f      	movs	r0, #15
 8002dbc:	f000 f808 	bl	8002dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc0:	f7ff fc60 	bl	8002684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <HAL_InitTick+0x54>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_InitTick+0x58>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fdb7 	bl	8003962 <HAL_SYSTICK_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00e      	b.n	8002e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b0f      	cmp	r3, #15
 8002e02:	d80a      	bhi.n	8002e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e04:	2200      	movs	r2, #0
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0c:	f000 fd7f 	bl	800390e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e10:	4a06      	ldr	r2, [pc, #24]	; (8002e2c <HAL_InitTick+0x5c>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	2000000c 	.word	0x2000000c
 8002e28:	20000014 	.word	0x20000014
 8002e2c:	20000010 	.word	0x20000010

08002e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_IncTick+0x1c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_IncTick+0x20>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a03      	ldr	r2, [pc, #12]	; (8002e50 <HAL_IncTick+0x20>)
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	20000014 	.word	0x20000014
 8002e50:	200001b4 	.word	0x200001b4

08002e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <HAL_GetTick+0x10>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	200001b4 	.word	0x200001b4

08002e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff fff0 	bl	8002e54 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e80:	d005      	beq.n	8002e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_Delay+0x44>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e8e:	bf00      	nop
 8002e90:	f7ff ffe0 	bl	8002e54 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8f7      	bhi.n	8002e90 <HAL_Delay+0x28>
  {
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000014 	.word	0x20000014

08002eb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0be      	b.n	8003050 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fbea 	bl	80026c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fbf1 	bl	80036dc <ADC_ConversionStop_Disable>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 8099 	bne.w	800303e <HAL_ADC_Init+0x18e>
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8095 	bne.w	800303e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f1c:	f023 0302 	bic.w	r3, r3, #2
 8002f20:	f043 0202 	orr.w	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7b1b      	ldrb	r3, [r3, #12]
 8002f36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f48:	d003      	beq.n	8002f52 <HAL_ADC_Init+0xa2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <HAL_ADC_Init+0xa8>
 8002f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f56:	e000      	b.n	8002f5a <HAL_ADC_Init+0xaa>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7d1b      	ldrb	r3, [r3, #20]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d119      	bne.n	8002f9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7b1b      	ldrb	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	035a      	lsls	r2, r3, #13
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e00b      	b.n	8002f9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_ADC_Init+0x1a8>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fcc:	d003      	beq.n	8002fd6 <HAL_ADC_Init+0x126>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d104      	bne.n	8002fe0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	051b      	lsls	r3, r3, #20
 8002fde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_ADC_Init+0x1ac>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d10b      	bne.n	800301c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800301a:	e018      	b.n	800304e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	f023 0312 	bic.w	r3, r3, #18
 8003024:	f043 0210 	orr.w	r2, r3, #16
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800303c:	e007      	b.n	800304e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	f043 0210 	orr.w	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	ffe1f7fd 	.word	0xffe1f7fd
 800305c:	ff1f0efe 	.word	0xff1f0efe

08003060 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_ADC_Start+0x1a>
 8003076:	2302      	movs	r3, #2
 8003078:	e098      	b.n	80031ac <HAL_ADC_Start+0x14c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fad0 	bl	8003628 <ADC_Enable>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8087 	bne.w	80031a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <HAL_ADC_Start+0x154>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d105      	bne.n	80030be <HAL_ADC_Start+0x5e>
 80030b2:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_ADC_Start+0x158>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d115      	bne.n	80030ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d026      	beq.n	8003126 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030e8:	e01d      	b.n	8003126 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <HAL_ADC_Start+0x158>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_ADC_Start+0xaa>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <HAL_ADC_Start+0x154>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10d      	bne.n	8003126 <HAL_ADC_Start+0xc6>
 800310a:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_ADC_Start+0x158>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800311e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f023 0206 	bic.w	r2, r3, #6
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	62da      	str	r2, [r3, #44]	; 0x2c
 800313e:	e002      	b.n	8003146 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0202 	mvn.w	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003162:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003166:	d113      	bne.n	8003190 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800316c:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_ADC_Start+0x154>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d105      	bne.n	800317e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_ADC_Start+0x158>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	e00c      	b.n	80031aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	e003      	b.n	80031aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40012800 	.word	0x40012800
 80031b8:	40012400 	.word	0x40012400

080031bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Stop+0x1a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e01a      	b.n	800320c <HAL_ADC_Stop+0x50>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa7c 	bl	80036dc <ADC_ConversionStop_Disable>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800322a:	f7ff fe13 	bl	8002e54 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0d3      	b.n	80033fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d131      	bne.n	80032c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	d12a      	bne.n	80032c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003272:	e021      	b.n	80032b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327a:	d01d      	beq.n	80032b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_ADC_PollForConversion+0x7e>
 8003282:	f7ff fde7 	bl	8002e54 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d212      	bcs.n	80032b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0a2      	b.n	80033fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0d6      	beq.n	8003274 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032c6:	e070      	b.n	80033aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_ADC_PollForConversion+0x1f4>)
 80032ca:	681c      	ldr	r4, [r3, #0]
 80032cc:	2002      	movs	r0, #2
 80032ce:	f001 f9c1 	bl	8004654 <HAL_RCCEx_GetPeriphCLKFreq>
 80032d2:	4603      	mov	r3, r0
 80032d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_ADC_PollForConversion+0x1f8>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d118      	bne.n	8003318 <HAL_ADC_PollForConversion+0x104>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68d9      	ldr	r1, [r3, #12]
 80032ec:	4b48      	ldr	r3, [pc, #288]	; (8003410 <HAL_ADC_PollForConversion+0x1fc>)
 80032ee:	400b      	ands	r3, r1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d111      	bne.n	8003318 <HAL_ADC_PollForConversion+0x104>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	4b46      	ldr	r3, [pc, #280]	; (8003414 <HAL_ADC_PollForConversion+0x200>)
 80032fc:	400b      	ands	r3, r1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <HAL_ADC_PollForConversion+0x100>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68d9      	ldr	r1, [r3, #12]
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_ADC_PollForConversion+0x204>)
 800330a:	400b      	ands	r3, r1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_PollForConversion+0x100>
 8003310:	2314      	movs	r3, #20
 8003312:	e020      	b.n	8003356 <HAL_ADC_PollForConversion+0x142>
 8003314:	2329      	movs	r3, #41	; 0x29
 8003316:	e01e      	b.n	8003356 <HAL_ADC_PollForConversion+0x142>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <HAL_ADC_PollForConversion+0x200>)
 8003320:	400b      	ands	r3, r1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_ADC_PollForConversion+0x120>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	4b3a      	ldr	r3, [pc, #232]	; (8003418 <HAL_ADC_PollForConversion+0x204>)
 800332e:	400b      	ands	r3, r1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_ADC_PollForConversion+0x13c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6919      	ldr	r1, [r3, #16]
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_ADC_PollForConversion+0x208>)
 800333c:	400b      	ands	r3, r1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_ADC_PollForConversion+0x140>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68d9      	ldr	r1, [r3, #12]
 8003348:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_ADC_PollForConversion+0x208>)
 800334a:	400b      	ands	r3, r1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_ADC_PollForConversion+0x140>
 8003350:	2354      	movs	r3, #84	; 0x54
 8003352:	e000      	b.n	8003356 <HAL_ADC_PollForConversion+0x142>
 8003354:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800335c:	e021      	b.n	80033a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d01a      	beq.n	800339c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_ADC_PollForConversion+0x168>
 800336c:	f7ff fd72 	bl	8002e54 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d20f      	bcs.n	800339c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d90b      	bls.n	800339c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e030      	b.n	80033fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d8d9      	bhi.n	800335e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f06f 0212 	mvn.w	r2, #18
 80033b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033ce:	d115      	bne.n	80033fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}
 8003406:	bf00      	nop
 8003408:	2000000c 	.word	0x2000000c
 800340c:	24924924 	.word	0x24924924
 8003410:	00924924 	.word	0x00924924
 8003414:	12492492 	.word	0x12492492
 8003418:	00492492 	.word	0x00492492
 800341c:	00249249 	.word	0x00249249

08003420 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x20>
 8003454:	2302      	movs	r3, #2
 8003456:	e0dc      	b.n	8003612 <HAL_ADC_ConfigChannel+0x1da>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b06      	cmp	r3, #6
 8003466:	d81c      	bhi.n	80034a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	3b05      	subs	r3, #5
 800347a:	221f      	movs	r2, #31
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	4019      	ands	r1, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	3b05      	subs	r3, #5
 8003494:	fa00 f203 	lsl.w	r2, r0, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	635a      	str	r2, [r3, #52]	; 0x34
 80034a0:	e03c      	b.n	800351c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d81c      	bhi.n	80034e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	3b23      	subs	r3, #35	; 0x23
 80034bc:	221f      	movs	r2, #31
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	4019      	ands	r1, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	3b23      	subs	r3, #35	; 0x23
 80034d6:	fa00 f203 	lsl.w	r2, r0, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
 80034e2:	e01b      	b.n	800351c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	3b41      	subs	r3, #65	; 0x41
 80034f6:	221f      	movs	r2, #31
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	4019      	ands	r1, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	3b41      	subs	r3, #65	; 0x41
 8003510:	fa00 f203 	lsl.w	r2, r0, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b09      	cmp	r3, #9
 8003522:	d91c      	bls.n	800355e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	3b1e      	subs	r3, #30
 8003536:	2207      	movs	r2, #7
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	4019      	ands	r1, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6898      	ldr	r0, [r3, #8]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	3b1e      	subs	r3, #30
 8003550:	fa00 f203 	lsl.w	r2, r0, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	e019      	b.n	8003592 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6919      	ldr	r1, [r3, #16]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	2207      	movs	r2, #7
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	4019      	ands	r1, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6898      	ldr	r0, [r3, #8]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	fa00 f203 	lsl.w	r2, r0, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d003      	beq.n	80035a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800359e:	2b11      	cmp	r3, #17
 80035a0:	d132      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_ADC_ConfigChannel+0x1e4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d125      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d126      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d11a      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_ADC_ConfigChannel+0x1e8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a13      	ldr	r2, [pc, #76]	; (8003624 <HAL_ADC_ConfigChannel+0x1ec>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	0c9a      	lsrs	r2, r3, #18
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035e8:	e002      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f9      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x1b2>
 80035f6:	e007      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012400 	.word	0x40012400
 8003620:	2000000c 	.word	0x2000000c
 8003624:	431bde83 	.word	0x431bde83

08003628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d040      	beq.n	80036c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003656:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <ADC_Enable+0xac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <ADC_Enable+0xb0>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	0c9b      	lsrs	r3, r3, #18
 8003662:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003664:	e002      	b.n	800366c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	3b01      	subs	r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f9      	bne.n	8003666 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003672:	f7ff fbef 	bl	8002e54 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003678:	e01f      	b.n	80036ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800367a:	f7ff fbeb 	bl	8002e54 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d918      	bls.n	80036ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d011      	beq.n	80036ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f043 0210 	orr.w	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e007      	b.n	80036ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d1d8      	bne.n	800367a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	2000000c 	.word	0x2000000c
 80036d8:	431bde83 	.word	0x431bde83

080036dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d12e      	bne.n	8003754 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003706:	f7ff fba5 	bl	8002e54 <HAL_GetTick>
 800370a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800370c:	e01b      	b.n	8003746 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800370e:	f7ff fba1 	bl	8002e54 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d914      	bls.n	8003746 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10d      	bne.n	8003746 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	f043 0210 	orr.w	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d0dc      	beq.n	800370e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800377c:	4013      	ands	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003792:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	60d3      	str	r3, [r2, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	f003 0307 	and.w	r3, r3, #7
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	db0b      	blt.n	80037ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	4906      	ldr	r1, [pc, #24]	; (80037f8 <__NVIC_EnableIRQ+0x34>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2001      	movs	r0, #1
 80037e6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c4:	d301      	bcc.n	80038ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00f      	b.n	80038ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <SysTick_Config+0x40>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d2:	210f      	movs	r1, #15
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	f7ff ff90 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <SysTick_Config+0x40>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <SysTick_Config+0x40>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	e000e010 	.word	0xe000e010

080038f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff2d 	bl	8003760 <__NVIC_SetPriorityGrouping>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003920:	f7ff ff42 	bl	80037a8 <__NVIC_GetPriorityGrouping>
 8003924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff90 	bl	8003850 <NVIC_EncodePriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff5f 	bl	80037fc <__NVIC_SetPriority>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff35 	bl	80037c4 <__NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffa2 	bl	80038b4 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b08b      	sub	sp, #44	; 0x2c
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003986:	2300      	movs	r3, #0
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398e:	e169      	b.n	8003c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003990:	2201      	movs	r2, #1
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f040 8158 	bne.w	8003c5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a9a      	ldr	r2, [pc, #616]	; (8003c1c <HAL_GPIO_Init+0x2a0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d05e      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039b8:	4a98      	ldr	r2, [pc, #608]	; (8003c1c <HAL_GPIO_Init+0x2a0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d875      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039be:	4a98      	ldr	r2, [pc, #608]	; (8003c20 <HAL_GPIO_Init+0x2a4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d058      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039c4:	4a96      	ldr	r2, [pc, #600]	; (8003c20 <HAL_GPIO_Init+0x2a4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d86f      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039ca:	4a96      	ldr	r2, [pc, #600]	; (8003c24 <HAL_GPIO_Init+0x2a8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d052      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039d0:	4a94      	ldr	r2, [pc, #592]	; (8003c24 <HAL_GPIO_Init+0x2a8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d869      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039d6:	4a94      	ldr	r2, [pc, #592]	; (8003c28 <HAL_GPIO_Init+0x2ac>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04c      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039dc:	4a92      	ldr	r2, [pc, #584]	; (8003c28 <HAL_GPIO_Init+0x2ac>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d863      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039e2:	4a92      	ldr	r2, [pc, #584]	; (8003c2c <HAL_GPIO_Init+0x2b0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d046      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039e8:	4a90      	ldr	r2, [pc, #576]	; (8003c2c <HAL_GPIO_Init+0x2b0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d85d      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039ee:	2b12      	cmp	r3, #18
 80039f0:	d82a      	bhi.n	8003a48 <HAL_GPIO_Init+0xcc>
 80039f2:	2b12      	cmp	r3, #18
 80039f4:	d859      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <HAL_GPIO_Init+0x80>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a77 	.word	0x08003a77
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a63 	.word	0x08003a63
 8003a08:	08003aa5 	.word	0x08003aa5
 8003a0c:	08003aab 	.word	0x08003aab
 8003a10:	08003aab 	.word	0x08003aab
 8003a14:	08003aab 	.word	0x08003aab
 8003a18:	08003aab 	.word	0x08003aab
 8003a1c:	08003aab 	.word	0x08003aab
 8003a20:	08003aab 	.word	0x08003aab
 8003a24:	08003aab 	.word	0x08003aab
 8003a28:	08003aab 	.word	0x08003aab
 8003a2c:	08003aab 	.word	0x08003aab
 8003a30:	08003aab 	.word	0x08003aab
 8003a34:	08003aab 	.word	0x08003aab
 8003a38:	08003aab 	.word	0x08003aab
 8003a3c:	08003aab 	.word	0x08003aab
 8003a40:	08003a59 	.word	0x08003a59
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	4a79      	ldr	r2, [pc, #484]	; (8003c30 <HAL_GPIO_Init+0x2b4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a4e:	e02c      	b.n	8003aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	623b      	str	r3, [r7, #32]
          break;
 8003a56:	e029      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	623b      	str	r3, [r7, #32]
          break;
 8003a60:	e024      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	3308      	adds	r3, #8
 8003a68:	623b      	str	r3, [r7, #32]
          break;
 8003a6a:	e01f      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	330c      	adds	r3, #12
 8003a72:	623b      	str	r3, [r7, #32]
          break;
 8003a74:	e01a      	b.n	8003aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a7e:	2304      	movs	r3, #4
 8003a80:	623b      	str	r3, [r7, #32]
          break;
 8003a82:	e013      	b.n	8003aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	611a      	str	r2, [r3, #16]
          break;
 8003a96:	e009      	b.n	8003aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a98:	2308      	movs	r3, #8
 8003a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	615a      	str	r2, [r3, #20]
          break;
 8003aa2:	e003      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	623b      	str	r3, [r7, #32]
          break;
 8003aa8:	e000      	b.n	8003aac <HAL_GPIO_Init+0x130>
          break;
 8003aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2bff      	cmp	r3, #255	; 0xff
 8003ab0:	d801      	bhi.n	8003ab6 <HAL_GPIO_Init+0x13a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	e001      	b.n	8003aba <HAL_GPIO_Init+0x13e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2bff      	cmp	r3, #255	; 0xff
 8003ac0:	d802      	bhi.n	8003ac8 <HAL_GPIO_Init+0x14c>
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	e002      	b.n	8003ace <HAL_GPIO_Init+0x152>
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	3b08      	subs	r3, #8
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	210f      	movs	r1, #15
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80b1 	beq.w	8003c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003afc:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4a4c      	ldr	r2, [pc, #304]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6193      	str	r3, [r2, #24]
 8003b08:	4b4a      	ldr	r3, [pc, #296]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b14:	4a48      	ldr	r2, [pc, #288]	; (8003c38 <HAL_GPIO_Init+0x2bc>)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a40      	ldr	r2, [pc, #256]	; (8003c3c <HAL_GPIO_Init+0x2c0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_GPIO_Init+0x1ec>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <HAL_GPIO_Init+0x2c4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00d      	beq.n	8003b64 <HAL_GPIO_Init+0x1e8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3e      	ldr	r2, [pc, #248]	; (8003c44 <HAL_GPIO_Init+0x2c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <HAL_GPIO_Init+0x1e4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3d      	ldr	r2, [pc, #244]	; (8003c48 <HAL_GPIO_Init+0x2cc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_GPIO_Init+0x1e0>
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e006      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	e004      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e002      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	f002 0203 	and.w	r2, r2, #3
 8003b70:	0092      	lsls	r2, r2, #2
 8003b72:	4093      	lsls	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b7a:	492f      	ldr	r1, [pc, #188]	; (8003c38 <HAL_GPIO_Init+0x2bc>)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	3302      	adds	r3, #2
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	492c      	ldr	r1, [pc, #176]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	4928      	ldr	r1, [pc, #160]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d006      	beq.n	8003bca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	4922      	ldr	r1, [pc, #136]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e006      	b.n	8003bd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	491e      	ldr	r1, [pc, #120]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4918      	ldr	r1, [pc, #96]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	4914      	ldr	r1, [pc, #80]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d021      	beq.n	8003c50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	490e      	ldr	r1, [pc, #56]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60cb      	str	r3, [r1, #12]
 8003c18:	e021      	b.n	8003c5e <HAL_GPIO_Init+0x2e2>
 8003c1a:	bf00      	nop
 8003c1c:	10320000 	.word	0x10320000
 8003c20:	10310000 	.word	0x10310000
 8003c24:	10220000 	.word	0x10220000
 8003c28:	10210000 	.word	0x10210000
 8003c2c:	10120000 	.word	0x10120000
 8003c30:	10110000 	.word	0x10110000
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40010800 	.word	0x40010800
 8003c40:	40010c00 	.word	0x40010c00
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	4909      	ldr	r1, [pc, #36]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	3301      	adds	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f47f ae8e 	bne.w	8003990 <HAL_GPIO_Init+0x14>
  }
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	372c      	adds	r7, #44	; 0x2c
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40010400 	.word	0x40010400

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ca0:	e003      	b.n	8003caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	611a      	str	r2, [r3, #16]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e272      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8087 	beq.w	8003de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd4:	4b92      	ldr	r3, [pc, #584]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d00c      	beq.n	8003cfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ce0:	4b8f      	ldr	r3, [pc, #572]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d112      	bne.n	8003d12 <HAL_RCC_OscConfig+0x5e>
 8003cec:	4b8c      	ldr	r3, [pc, #560]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf8:	d10b      	bne.n	8003d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfa:	4b89      	ldr	r3, [pc, #548]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d06c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x12c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d168      	bne.n	8003de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e24c      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x76>
 8003d1c:	4b80      	ldr	r3, [pc, #512]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7f      	ldr	r2, [pc, #508]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e02e      	b.n	8003d88 <HAL_RCC_OscConfig+0xd4>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x98>
 8003d32:	4b7b      	ldr	r3, [pc, #492]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7a      	ldr	r2, [pc, #488]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b78      	ldr	r3, [pc, #480]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a77      	ldr	r2, [pc, #476]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e01d      	b.n	8003d88 <HAL_RCC_OscConfig+0xd4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0xbc>
 8003d56:	4b72      	ldr	r3, [pc, #456]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a71      	ldr	r2, [pc, #452]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b6f      	ldr	r3, [pc, #444]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6e      	ldr	r2, [pc, #440]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0xd4>
 8003d70:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6a      	ldr	r2, [pc, #424]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a67      	ldr	r2, [pc, #412]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7ff f860 	bl	8002e54 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7ff f85c 	bl	8002e54 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e200      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0xe4>
 8003db6:	e014      	b.n	8003de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7ff f84c 	bl	8002e54 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7ff f848 	bl	8002e54 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1ec      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	4b53      	ldr	r3, [pc, #332]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x10c>
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d063      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dee:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dfa:	4b49      	ldr	r3, [pc, #292]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d11c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x18c>
 8003e06:	4b46      	ldr	r3, [pc, #280]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e12:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_RCC_OscConfig+0x176>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d001      	beq.n	8003e2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e1c0      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2a:	4b3d      	ldr	r3, [pc, #244]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4939      	ldr	r1, [pc, #228]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	e03a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e48:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7ff f801 	bl	8002e54 <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e56:	f7fe fffd 	bl	8002e54 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e1a1      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e74:	4b2a      	ldr	r3, [pc, #168]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4927      	ldr	r1, [pc, #156]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
 8003e88:	e015      	b.n	8003eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8a:	4b26      	ldr	r3, [pc, #152]	; (8003f24 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fe ffe0 	bl	8002e54 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e98:	f7fe ffdc 	bl	8002e54 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e180      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d03a      	beq.n	8003f38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d019      	beq.n	8003efe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eca:	4b17      	ldr	r3, [pc, #92]	; (8003f28 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed0:	f7fe ffc0 	bl	8002e54 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed8:	f7fe ffbc 	bl	8002e54 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e160      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eea:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f000 fad8 	bl	80044ac <RCC_Delay>
 8003efc:	e01c      	b.n	8003f38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efe:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_RCC_OscConfig+0x274>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fe ffa6 	bl	8002e54 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0a:	e00f      	b.n	8003f2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe ffa2 	bl	8002e54 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d908      	bls.n	8003f2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e146      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000
 8003f24:	42420000 	.word	0x42420000
 8003f28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2c:	4b92      	ldr	r3, [pc, #584]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e9      	bne.n	8003f0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80a6 	beq.w	8004092 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4a:	4b8b      	ldr	r3, [pc, #556]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f56:	4b88      	ldr	r3, [pc, #544]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	4a87      	ldr	r2, [pc, #540]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	61d3      	str	r3, [r2, #28]
 8003f62:	4b85      	ldr	r3, [pc, #532]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b82      	ldr	r3, [pc, #520]	; (800417c <HAL_RCC_OscConfig+0x4c8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b7f      	ldr	r3, [pc, #508]	; (800417c <HAL_RCC_OscConfig+0x4c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a7e      	ldr	r2, [pc, #504]	; (800417c <HAL_RCC_OscConfig+0x4c8>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe ff63 	bl	8002e54 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fe ff5f 	bl	8002e54 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b64      	cmp	r3, #100	; 0x64
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e103      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b75      	ldr	r3, [pc, #468]	; (800417c <HAL_RCC_OscConfig+0x4c8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x312>
 8003fb8:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4a6e      	ldr	r2, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6213      	str	r3, [r2, #32]
 8003fc4:	e02d      	b.n	8004022 <HAL_RCC_OscConfig+0x36e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x334>
 8003fce:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4a69      	ldr	r2, [pc, #420]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6213      	str	r3, [r2, #32]
 8003fda:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4a66      	ldr	r2, [pc, #408]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	6213      	str	r3, [r2, #32]
 8003fe6:	e01c      	b.n	8004022 <HAL_RCC_OscConfig+0x36e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d10c      	bne.n	800400a <HAL_RCC_OscConfig+0x356>
 8003ff0:	4b61      	ldr	r3, [pc, #388]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	4a60      	ldr	r2, [pc, #384]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	6213      	str	r3, [r2, #32]
 8003ffc:	4b5e      	ldr	r3, [pc, #376]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4a5d      	ldr	r2, [pc, #372]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6213      	str	r3, [r2, #32]
 8004008:	e00b      	b.n	8004022 <HAL_RCC_OscConfig+0x36e>
 800400a:	4b5b      	ldr	r3, [pc, #364]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4a5a      	ldr	r2, [pc, #360]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6213      	str	r3, [r2, #32]
 8004016:	4b58      	ldr	r3, [pc, #352]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a57      	ldr	r2, [pc, #348]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d015      	beq.n	8004056 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402a:	f7fe ff13 	bl	8002e54 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fe ff0f 	bl	8002e54 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e0b1      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	4b4b      	ldr	r3, [pc, #300]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ee      	beq.n	8004032 <HAL_RCC_OscConfig+0x37e>
 8004054:	e014      	b.n	8004080 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fe fefd 	bl	8002e54 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fe fef9 	bl	8002e54 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e09b      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004074:	4b40      	ldr	r3, [pc, #256]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1ee      	bne.n	800405e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004086:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	4a3b      	ldr	r2, [pc, #236]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004090:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8087 	beq.w	80041aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409c:	4b36      	ldr	r3, [pc, #216]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f003 030c 	and.w	r3, r3, #12
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d061      	beq.n	800416c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d146      	bne.n	800413e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b0:	4b33      	ldr	r3, [pc, #204]	; (8004180 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe fecd 	bl	8002e54 <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040be:	f7fe fec9 	bl	8002e54 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e06d      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d108      	bne.n	80040f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	4921      	ldr	r1, [pc, #132]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f8:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a19      	ldr	r1, [r3, #32]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	430b      	orrs	r3, r1
 800410a:	491b      	ldr	r1, [pc, #108]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_OscConfig+0x4cc>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fe fe9d 	bl	8002e54 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411e:	f7fe fe99 	bl	8002e54 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e03d      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x46a>
 800413c:	e035      	b.n	80041aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_RCC_OscConfig+0x4cc>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fe86 	bl	8002e54 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fe fe82 	bl	8002e54 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e026      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x498>
 800416a:	e01e      	b.n	80041aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e019      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
 8004178:	40021000 	.word	0x40021000
 800417c:	40007000 	.word	0x40007000
 8004180:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x500>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	429a      	cmp	r2, r3
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40021000 	.word	0x40021000

080041b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0d0      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d910      	bls.n	80041fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b67      	ldr	r3, [pc, #412]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 0207 	bic.w	r2, r3, #7
 80041e2:	4965      	ldr	r1, [pc, #404]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0b8      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4a58      	ldr	r2, [pc, #352]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 800421a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800421e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800422c:	4b53      	ldr	r3, [pc, #332]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004232:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b50      	ldr	r3, [pc, #320]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	494d      	ldr	r1, [pc, #308]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	4313      	orrs	r3, r2
 8004248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d040      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d115      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07f      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e073      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e06b      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4936      	ldr	r1, [pc, #216]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a8:	f7fe fdd4 	bl	8002e54 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fe fdd0 	bl	8002e54 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e053      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d210      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	4922      	ldr	r1, [pc, #136]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e032      	b.n	800436e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4916      	ldr	r1, [pc, #88]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	490e      	ldr	r1, [pc, #56]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004346:	f000 f821 	bl	800438c <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490a      	ldr	r1, [pc, #40]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_RCC_ClockConfig+0x1cc>)
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1d0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fd32 	bl	8002dd0 <HAL_InitTick>

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40022000 	.word	0x40022000
 800437c:	40021000 	.word	0x40021000
 8004380:	08007778 	.word	0x08007778
 8004384:	2000000c 	.word	0x2000000c
 8004388:	20000010 	.word	0x20000010

0800438c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	b490      	push	{r4, r7}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004392:	4b29      	ldr	r3, [pc, #164]	; (8004438 <HAL_RCC_GetSysClockFreq+0xac>)
 8004394:	1d3c      	adds	r4, r7, #4
 8004396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800439c:	f240 2301 	movw	r3, #513	; 0x201
 80043a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043b6:	4b21      	ldr	r3, [pc, #132]	; (800443c <HAL_RCC_GetSysClockFreq+0xb0>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x40>
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x46>
 80043ca:	e02b      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043ce:	623b      	str	r3, [r7, #32]
      break;
 80043d0:	e02b      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	0c9b      	lsrs	r3, r3, #18
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	3328      	adds	r3, #40	; 0x28
 80043dc:	443b      	add	r3, r7
 80043de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d012      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <HAL_RCC_GetSysClockFreq+0xb0>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	0c5b      	lsrs	r3, r3, #17
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	3328      	adds	r3, #40	; 0x28
 80043fa:	443b      	add	r3, r7
 80043fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004400:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004406:	fb03 f202 	mul.w	r2, r3, r2
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
 8004412:	e004      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4a0b      	ldr	r2, [pc, #44]	; (8004444 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	623b      	str	r3, [r7, #32]
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004426:	623b      	str	r3, [r7, #32]
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	6a3b      	ldr	r3, [r7, #32]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3728      	adds	r7, #40	; 0x28
 8004430:	46bd      	mov	sp, r7
 8004432:	bc90      	pop	{r4, r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	080063e8 	.word	0x080063e8
 800443c:	40021000 	.word	0x40021000
 8004440:	007a1200 	.word	0x007a1200
 8004444:	003d0900 	.word	0x003d0900

08004448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <HAL_RCC_GetHCLKFreq+0x10>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	2000000c 	.word	0x2000000c

0800445c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004460:	f7ff fff2 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	08007788 	.word	0x08007788

08004484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004488:	f7ff ffde 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	0adb      	lsrs	r3, r3, #11
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4903      	ldr	r1, [pc, #12]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	08007788 	.word	0x08007788

080044ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <RCC_Delay+0x34>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <RCC_Delay+0x38>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	0a5b      	lsrs	r3, r3, #9
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044c8:	bf00      	nop
  }
  while (Delay --);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1e5a      	subs	r2, r3, #1
 80044ce:	60fa      	str	r2, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f9      	bne.n	80044c8 <RCC_Delay+0x1c>
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr
 80044e0:	2000000c 	.word	0x2000000c
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d07d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004504:	2300      	movs	r3, #0
 8004506:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004508:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10d      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b4c      	ldr	r3, [pc, #304]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	61d3      	str	r3, [r2, #28]
 8004520:	4b49      	ldr	r3, [pc, #292]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	4b46      	ldr	r3, [pc, #280]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d118      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453c:	4b43      	ldr	r3, [pc, #268]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a42      	ldr	r2, [pc, #264]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004548:	f7fe fc84 	bl	8002e54 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454e:	e008      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004550:	f7fe fc80 	bl	8002e54 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e06d      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800456e:	4b36      	ldr	r3, [pc, #216]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02e      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d027      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800458c:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004594:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004596:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800459c:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045a2:	4a29      	ldr	r2, [pc, #164]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d014      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b2:	f7fe fc4f 	bl	8002e54 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b8:	e00a      	b.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ba:	f7fe fc4b 	bl	8002e54 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e036      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ee      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4917      	ldr	r1, [pc, #92]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d105      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f4:	4b14      	ldr	r3, [pc, #80]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	4a13      	ldr	r2, [pc, #76]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	490b      	ldr	r1, [pc, #44]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	4904      	ldr	r1, [pc, #16]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
 800464c:	40007000 	.word	0x40007000
 8004650:	42420440 	.word	0x42420440

08004654 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004654:	b590      	push	{r4, r7, lr}
 8004656:	b08d      	sub	sp, #52	; 0x34
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800465c:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800465e:	f107 040c 	add.w	r4, r7, #12
 8004662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004668:	f240 2301 	movw	r3, #513	; 0x201
 800466c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
 8004672:	2300      	movs	r3, #0
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004676:	2300      	movs	r3, #0
 8004678:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	2300      	movs	r3, #0
 8004680:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b10      	cmp	r3, #16
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b10      	cmp	r3, #16
 800468c:	f200 808e 	bhi.w	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d049      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d079      	beq.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800469c:	e086      	b.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800469e:	4b49      	ldr	r3, [pc, #292]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80046a4:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d07f      	beq.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	0c9b      	lsrs	r3, r3, #18
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	3330      	adds	r3, #48	; 0x30
 80046ba:	443b      	add	r3, r7
 80046bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046c0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d017      	beq.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046cc:	4b3d      	ldr	r3, [pc, #244]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	0c5b      	lsrs	r3, r3, #17
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	3330      	adds	r3, #48	; 0x30
 80046d8:	443b      	add	r3, r7
 80046da:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046ea:	4a37      	ldr	r2, [pc, #220]	; (80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fa:	e004      	b.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	4a33      	ldr	r2, [pc, #204]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004700:	fb02 f303 	mul.w	r3, r2, r3
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004706:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004712:	d102      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004718:	e04a      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004728:	e042      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800472a:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473a:	d108      	bne.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
 800474c:	e01f      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004758:	d109      	bne.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800475a:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004766:	f649 4340 	movw	r3, #40000	; 0x9c40
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
 800476c:	e00f      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004778:	d11c      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004786:	f24f 4324 	movw	r3, #62500	; 0xf424
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800478c:	e012      	b.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800478e:	e011      	b.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004790:	f7ff fe78 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	0b9b      	lsrs	r3, r3, #14
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	3301      	adds	r3, #1
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80047aa:	e004      	b.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80047b4:	bf00      	nop
    }
  }
  return (frequency);
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3734      	adds	r7, #52	; 0x34
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd90      	pop	{r4, r7, pc}
 80047c0:	080063f8 	.word	0x080063f8
 80047c4:	40021000 	.word	0x40021000
 80047c8:	007a1200 	.word	0x007a1200
 80047cc:	003d0900 	.word	0x003d0900
 80047d0:	aaaaaaab 	.word	0xaaaaaaab

080047d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e076      	b.n	80048d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d108      	bne.n	8004800 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047f6:	d009      	beq.n	800480c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	61da      	str	r2, [r3, #28]
 80047fe:	e005      	b.n	800480c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fd ff8a 	bl	8002740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004842:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004890:	ea42 0103 	orr.w	r1, r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	0c1a      	lsrs	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f002 0204 	and.w	r2, r2, #4
 80048b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_SPI_Transmit+0x22>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e126      	b.n	8004b4c <HAL_SPI_Transmit+0x270>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004906:	f7fe faa5 	bl	8002e54 <HAL_GetTick>
 800490a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	d002      	beq.n	8004922 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800491c:	2302      	movs	r3, #2
 800491e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004920:	e10b      	b.n	8004b3a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_SPI_Transmit+0x52>
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004932:	e102      	b.n	8004b3a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2203      	movs	r2, #3
 8004938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497a:	d10f      	bne.n	800499c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800499a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d007      	beq.n	80049ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c2:	d14b      	bne.n	8004a5c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_SPI_Transmit+0xf6>
 80049cc:	8afb      	ldrh	r3, [r7, #22]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d13e      	bne.n	8004a50 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049f6:	e02b      	b.n	8004a50 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d112      	bne.n	8004a2c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	1c9a      	adds	r2, r3, #2
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a2a:	e011      	b.n	8004a50 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a2c:	f7fe fa12 	bl	8002e54 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d803      	bhi.n	8004a44 <HAL_SPI_Transmit+0x168>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a42:	d102      	bne.n	8004a4a <HAL_SPI_Transmit+0x16e>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a4e:	e074      	b.n	8004b3a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ce      	bne.n	80049f8 <HAL_SPI_Transmit+0x11c>
 8004a5a:	e04c      	b.n	8004af6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_Transmit+0x18e>
 8004a64:	8afb      	ldrh	r3, [r7, #22]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d140      	bne.n	8004aec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a90:	e02c      	b.n	8004aec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d113      	bne.n	8004ac8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	7812      	ldrb	r2, [r2, #0]
 8004aac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ac6:	e011      	b.n	8004aec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac8:	f7fe f9c4 	bl	8002e54 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d803      	bhi.n	8004ae0 <HAL_SPI_Transmit+0x204>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d102      	bne.n	8004ae6 <HAL_SPI_Transmit+0x20a>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004aea:	e026      	b.n	8004b3a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1cd      	bne.n	8004a92 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	6839      	ldr	r1, [r7, #0]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f8b2 	bl	8004c64 <SPI_EndRxTxTransaction>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b14:	2300      	movs	r3, #0
 8004b16:	613b      	str	r3, [r7, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e000      	b.n	8004b3a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3720      	adds	r7, #32
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b64:	f7fe f976 	bl	8002e54 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b74:	f7fe f96e 	bl	8002e54 <HAL_GetTick>
 8004b78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7a:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	015b      	lsls	r3, r3, #5
 8004b80:	0d1b      	lsrs	r3, r3, #20
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	fb02 f303 	mul.w	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8a:	e054      	b.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d050      	beq.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b94:	f7fe f95e 	bl	8002e54 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d902      	bls.n	8004baa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d13d      	bne.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc2:	d111      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bcc:	d004      	beq.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd6:	d107      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bf0:	d10f      	bne.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e017      	b.n	8004c56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d19b      	bne.n	8004b8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	2000000c 	.word	0x2000000c

08004c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2200      	movs	r2, #0
 8004c78:	2180      	movs	r1, #128	; 0x80
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff ff6a 	bl	8004b54 <SPI_WaitFlagStateUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f043 0220 	orr.w	r2, r3, #32
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e000      	b.n	8004c98 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e041      	b.n	8004d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fd84 	bl	80027d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f000 fe64 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e041      	b.n	8004dd4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f839 	bl	8004ddc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f000 fe15 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e041      	b.n	8004e84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f839 	bl	8004e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f000 fdbd 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d109      	bne.n	8004ec4 <HAL_TIM_PWM_Start+0x24>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	e022      	b.n	8004f0a <HAL_TIM_PWM_Start+0x6a>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d109      	bne.n	8004ede <HAL_TIM_PWM_Start+0x3e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	bf14      	ite	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	2300      	moveq	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	e015      	b.n	8004f0a <HAL_TIM_PWM_Start+0x6a>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d109      	bne.n	8004ef8 <HAL_TIM_PWM_Start+0x58>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e008      	b.n	8004f0a <HAL_TIM_PWM_Start+0x6a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e05e      	b.n	8004fd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x82>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f20:	e013      	b.n	8004f4a <HAL_TIM_PWM_Start+0xaa>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d104      	bne.n	8004f32 <HAL_TIM_PWM_Start+0x92>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	e00b      	b.n	8004f4a <HAL_TIM_PWM_Start+0xaa>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d104      	bne.n	8004f42 <HAL_TIM_PWM_Start+0xa2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f40:	e003      	b.n	8004f4a <HAL_TIM_PWM_Start+0xaa>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 f838 	bl	8005fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <HAL_TIM_PWM_Start+0x138>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <HAL_TIM_PWM_Start+0x138>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_TIM_PWM_Start+0xfa>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d009      	beq.n	8004f9a <HAL_TIM_PWM_Start+0xfa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a14      	ldr	r2, [pc, #80]	; (8004fdc <HAL_TIM_PWM_Start+0x13c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_TIM_PWM_Start+0xfa>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <HAL_TIM_PWM_Start+0x140>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d111      	bne.n	8004fbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b06      	cmp	r3, #6
 8004faa:	d010      	beq.n	8004fce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbc:	e007      	b.n	8004fce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40012c00 	.word	0x40012c00
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800

08004fe4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_TIM_PWM_Start_IT+0x24>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	bf14      	ite	ne
 8005000:	2301      	movne	r3, #1
 8005002:	2300      	moveq	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	e022      	b.n	800504e <HAL_TIM_PWM_Start_IT+0x6a>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2b04      	cmp	r3, #4
 800500c:	d109      	bne.n	8005022 <HAL_TIM_PWM_Start_IT+0x3e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	bf14      	ite	ne
 800501a:	2301      	movne	r3, #1
 800501c:	2300      	moveq	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	e015      	b.n	800504e <HAL_TIM_PWM_Start_IT+0x6a>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b08      	cmp	r3, #8
 8005026:	d109      	bne.n	800503c <HAL_TIM_PWM_Start_IT+0x58>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	e008      	b.n	800504e <HAL_TIM_PWM_Start_IT+0x6a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b01      	cmp	r3, #1
 8005046:	bf14      	ite	ne
 8005048:	2301      	movne	r3, #1
 800504a:	2300      	moveq	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e0a4      	b.n	80051a0 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <HAL_TIM_PWM_Start_IT+0x82>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005064:	e013      	b.n	800508e <HAL_TIM_PWM_Start_IT+0xaa>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start_IT+0x92>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005074:	e00b      	b.n	800508e <HAL_TIM_PWM_Start_IT+0xaa>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Start_IT+0xa2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005084:	e003      	b.n	800508e <HAL_TIM_PWM_Start_IT+0xaa>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d841      	bhi.n	8005118 <HAL_TIM_PWM_Start_IT+0x134>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <HAL_TIM_PWM_Start_IT+0xb8>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050d1 	.word	0x080050d1
 80050a0:	08005119 	.word	0x08005119
 80050a4:	08005119 	.word	0x08005119
 80050a8:	08005119 	.word	0x08005119
 80050ac:	080050e3 	.word	0x080050e3
 80050b0:	08005119 	.word	0x08005119
 80050b4:	08005119 	.word	0x08005119
 80050b8:	08005119 	.word	0x08005119
 80050bc:	080050f5 	.word	0x080050f5
 80050c0:	08005119 	.word	0x08005119
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005119 	.word	0x08005119
 80050cc:	08005107 	.word	0x08005107
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0202 	orr.w	r2, r2, #2
 80050de:	60da      	str	r2, [r3, #12]
      break;
 80050e0:	e01b      	b.n	800511a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0204 	orr.w	r2, r2, #4
 80050f0:	60da      	str	r2, [r3, #12]
      break;
 80050f2:	e012      	b.n	800511a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	60da      	str	r2, [r3, #12]
      break;
 8005104:	e009      	b.n	800511a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0210 	orr.w	r2, r2, #16
 8005114:	60da      	str	r2, [r3, #12]
      break;
 8005116:	e000      	b.n	800511a <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8005118:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2201      	movs	r2, #1
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f000 ff50 	bl	8005fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <HAL_TIM_PWM_Start_IT+0x1c4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d107      	bne.n	8005142 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005140:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	; (80051a8 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <HAL_TIM_PWM_Start_IT+0x186>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d009      	beq.n	800516a <HAL_TIM_PWM_Start_IT+0x186>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a14      	ldr	r2, [pc, #80]	; (80051ac <HAL_TIM_PWM_Start_IT+0x1c8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_TIM_PWM_Start_IT+0x186>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d111      	bne.n	800518e <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b06      	cmp	r3, #6
 800517a:	d010      	beq.n	800519e <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	e007      	b.n	800519e <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800

080051b4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d841      	bhi.n	8005248 <HAL_TIM_PWM_Stop_IT+0x94>
 80051c4:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <HAL_TIM_PWM_Stop_IT+0x18>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	08005201 	.word	0x08005201
 80051d0:	08005249 	.word	0x08005249
 80051d4:	08005249 	.word	0x08005249
 80051d8:	08005249 	.word	0x08005249
 80051dc:	08005213 	.word	0x08005213
 80051e0:	08005249 	.word	0x08005249
 80051e4:	08005249 	.word	0x08005249
 80051e8:	08005249 	.word	0x08005249
 80051ec:	08005225 	.word	0x08005225
 80051f0:	08005249 	.word	0x08005249
 80051f4:	08005249 	.word	0x08005249
 80051f8:	08005249 	.word	0x08005249
 80051fc:	08005237 	.word	0x08005237
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0202 	bic.w	r2, r2, #2
 800520e:	60da      	str	r2, [r3, #12]
      break;
 8005210:	e01b      	b.n	800524a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0204 	bic.w	r2, r2, #4
 8005220:	60da      	str	r2, [r3, #12]
      break;
 8005222:	e012      	b.n	800524a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0208 	bic.w	r2, r2, #8
 8005232:	60da      	str	r2, [r3, #12]
      break;
 8005234:	e009      	b.n	800524a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0210 	bic.w	r2, r2, #16
 8005244:	60da      	str	r2, [r3, #12]
      break;
 8005246:	e000      	b.n	800524a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8005248:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2200      	movs	r2, #0
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 feb8 	bl	8005fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a29      	ldr	r2, [pc, #164]	; (8005304 <HAL_TIM_PWM_Stop_IT+0x150>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d117      	bne.n	8005292 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	f241 1311 	movw	r3, #4369	; 0x1111
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_TIM_PWM_Stop_IT+0xde>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	f240 4344 	movw	r3, #1092	; 0x444
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d107      	bne.n	8005292 <HAL_TIM_PWM_Stop_IT+0xde>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	f241 1311 	movw	r3, #4369	; 0x1111
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <HAL_TIM_PWM_Stop_IT+0x10e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	f240 4344 	movw	r3, #1092	; 0x444
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d107      	bne.n	80052c2 <HAL_TIM_PWM_Stop_IT+0x10e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0201 	bic.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_PWM_Stop_IT+0x11e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d0:	e013      	b.n	80052fa <HAL_TIM_PWM_Stop_IT+0x146>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Stop_IT+0x12e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_PWM_Stop_IT+0x146>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Stop_IT+0x13e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f0:	e003      	b.n	80052fa <HAL_TIM_PWM_Stop_IT+0x146>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40012c00 	.word	0x40012c00

08005308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0202 	mvn.w	r2, #2
 8005334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fb12 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fb05 	bl	8005962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fb14 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0204 	mvn.w	r2, #4
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fae8 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fadb 	bl	8005962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 faea 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0208 	mvn.w	r2, #8
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2204      	movs	r2, #4
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fabe 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fab1 	bl	8005962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fac0 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b10      	cmp	r3, #16
 8005418:	d122      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0310 	and.w	r3, r3, #16
 8005424:	2b10      	cmp	r3, #16
 8005426:	d11b      	bne.n	8005460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0210 	mvn.w	r2, #16
 8005430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2208      	movs	r2, #8
 8005436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fa94 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 800544c:	e005      	b.n	800545a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa87 	bl	8005962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fa96 	bl	8005986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d10e      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b01      	cmp	r3, #1
 800547a:	d107      	bne.n	800548c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0201 	mvn.w	r2, #1
 8005484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fa62 	bl	8005950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fe64 	bl	8006180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa5a 	bl	8005998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0320 	and.w	r3, r3, #32
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d10e      	bne.n	8005510 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d107      	bne.n	8005510 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0220 	mvn.w	r2, #32
 8005508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fe2f 	bl	800616e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_TIM_OC_ConfigChannel+0x1a>
 800552e:	2302      	movs	r3, #2
 8005530:	e046      	b.n	80055c0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d839      	bhi.n	80055b4 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <HAL_TIM_OC_ConfigChannel+0x30>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	0800557d 	.word	0x0800557d
 800554c:	080055b5 	.word	0x080055b5
 8005550:	080055b5 	.word	0x080055b5
 8005554:	080055b5 	.word	0x080055b5
 8005558:	0800558b 	.word	0x0800558b
 800555c:	080055b5 	.word	0x080055b5
 8005560:	080055b5 	.word	0x080055b5
 8005564:	080055b5 	.word	0x080055b5
 8005568:	08005599 	.word	0x08005599
 800556c:	080055b5 	.word	0x080055b5
 8005570:	080055b5 	.word	0x080055b5
 8005574:	080055b5 	.word	0x080055b5
 8005578:	080055a7 	.word	0x080055a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fa74 	bl	8005a70 <TIM_OC1_SetConfig>
      break;
 8005588:	e015      	b.n	80055b6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fad3 	bl	8005b3c <TIM_OC2_SetConfig>
      break;
 8005596:	e00e      	b.n	80055b6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68b9      	ldr	r1, [r7, #8]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fb36 	bl	8005c10 <TIM_OC3_SetConfig>
      break;
 80055a4:	e007      	b.n	80055b6 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fb99 	bl	8005ce4 <TIM_OC4_SetConfig>
      break;
 80055b2:	e000      	b.n	80055b6 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80055b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055de:	2302      	movs	r3, #2
 80055e0:	e0ac      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x174>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b0c      	cmp	r3, #12
 80055ee:	f200 809f 	bhi.w	8005730 <HAL_TIM_PWM_ConfigChannel+0x168>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	08005731 	.word	0x08005731
 8005600:	08005731 	.word	0x08005731
 8005604:	08005731 	.word	0x08005731
 8005608:	0800566d 	.word	0x0800566d
 800560c:	08005731 	.word	0x08005731
 8005610:	08005731 	.word	0x08005731
 8005614:	08005731 	.word	0x08005731
 8005618:	080056af 	.word	0x080056af
 800561c:	08005731 	.word	0x08005731
 8005620:	08005731 	.word	0x08005731
 8005624:	08005731 	.word	0x08005731
 8005628:	080056ef 	.word	0x080056ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fa1c 	bl	8005a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0208 	orr.w	r2, r2, #8
 8005646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0204 	bic.w	r2, r2, #4
 8005656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6999      	ldr	r1, [r3, #24]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	619a      	str	r2, [r3, #24]
      break;
 800566a:	e062      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fa62 	bl	8005b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6999      	ldr	r1, [r3, #24]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	021a      	lsls	r2, r3, #8
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	619a      	str	r2, [r3, #24]
      break;
 80056ac:	e041      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 faab 	bl	8005c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69da      	ldr	r2, [r3, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0208 	orr.w	r2, r2, #8
 80056c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0204 	bic.w	r2, r2, #4
 80056d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69d9      	ldr	r1, [r3, #28]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	61da      	str	r2, [r3, #28]
      break;
 80056ec:	e021      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 faf5 	bl	8005ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69d9      	ldr	r1, [r3, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	021a      	lsls	r2, r3, #8
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	61da      	str	r2, [r3, #28]
      break;
 800572e:	e000      	b.n	8005732 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIM_ConfigClockSource+0x18>
 8005758:	2302      	movs	r3, #2
 800575a:	e0b3      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x180>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800577a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005782:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005794:	d03e      	beq.n	8005814 <HAL_TIM_ConfigClockSource+0xd0>
 8005796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579a:	f200 8087 	bhi.w	80058ac <HAL_TIM_ConfigClockSource+0x168>
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	f000 8085 	beq.w	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057aa:	d87f      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x168>
 80057ac:	2b70      	cmp	r3, #112	; 0x70
 80057ae:	d01a      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0xa2>
 80057b0:	2b70      	cmp	r3, #112	; 0x70
 80057b2:	d87b      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x168>
 80057b4:	2b60      	cmp	r3, #96	; 0x60
 80057b6:	d050      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x116>
 80057b8:	2b60      	cmp	r3, #96	; 0x60
 80057ba:	d877      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x168>
 80057bc:	2b50      	cmp	r3, #80	; 0x50
 80057be:	d03c      	beq.n	800583a <HAL_TIM_ConfigClockSource+0xf6>
 80057c0:	2b50      	cmp	r3, #80	; 0x50
 80057c2:	d873      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x168>
 80057c4:	2b40      	cmp	r3, #64	; 0x40
 80057c6:	d058      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x136>
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d86f      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x168>
 80057cc:	2b30      	cmp	r3, #48	; 0x30
 80057ce:	d064      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x156>
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d86b      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x168>
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d060      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x156>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d867      	bhi.n	80058ac <HAL_TIM_ConfigClockSource+0x168>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d05c      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x156>
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d05a      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057e4:	e062      	b.n	80058ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	f000 fbc8 	bl	8005f8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005808:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	609a      	str	r2, [r3, #8]
      break;
 8005812:	e04e      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	6899      	ldr	r1, [r3, #8]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f000 fbb1 	bl	8005f8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005836:	609a      	str	r2, [r3, #8]
      break;
 8005838:	e03b      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6859      	ldr	r1, [r3, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	461a      	mov	r2, r3
 8005848:	f000 fb28 	bl	8005e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2150      	movs	r1, #80	; 0x50
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fb7f 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005858:	e02b      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	461a      	mov	r2, r3
 8005868:	f000 fb46 	bl	8005ef8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2160      	movs	r1, #96	; 0x60
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fb6f 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005878:	e01b      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	461a      	mov	r2, r3
 8005888:	f000 fb08 	bl	8005e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fb5f 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 8005898:	e00b      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f000 fb56 	bl	8005f56 <TIM_ITRx_SetConfig>
        break;
 80058aa:	e002      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058ac:	bf00      	nop
 80058ae:	e000      	b.n	80058b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e031      	b.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa42 	bl	8005d80 <TIM_SlaveTimer_SetConfig>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e018      	b.n	8005948 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005924:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005934:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr

08005986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	bc80      	pop	{r7}
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr
	...

080059ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a29      	ldr	r2, [pc, #164]	; (8005a64 <TIM_Base_SetConfig+0xb8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_Base_SetConfig+0x30>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ca:	d007      	beq.n	80059dc <TIM_Base_SetConfig+0x30>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a26      	ldr	r2, [pc, #152]	; (8005a68 <TIM_Base_SetConfig+0xbc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_Base_SetConfig+0x30>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a25      	ldr	r2, [pc, #148]	; (8005a6c <TIM_Base_SetConfig+0xc0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d108      	bne.n	80059ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <TIM_Base_SetConfig+0xb8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_Base_SetConfig+0x62>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fc:	d007      	beq.n	8005a0e <TIM_Base_SetConfig+0x62>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <TIM_Base_SetConfig+0xbc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_Base_SetConfig+0x62>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <TIM_Base_SetConfig+0xc0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a07      	ldr	r2, [pc, #28]	; (8005a64 <TIM_Base_SetConfig+0xb8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d103      	bne.n	8005a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	615a      	str	r2, [r3, #20]
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800

08005a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0201 	bic.w	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 0302 	bic.w	r3, r3, #2
 8005ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <TIM_OC1_SetConfig+0xc8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d10c      	bne.n	8005ae6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0308 	bic.w	r3, r3, #8
 8005ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f023 0304 	bic.w	r3, r3, #4
 8005ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <TIM_OC1_SetConfig+0xc8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d111      	bne.n	8005b12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	621a      	str	r2, [r3, #32]
}
 8005b2c:	bf00      	nop
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40012c00 	.word	0x40012c00

08005b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f023 0210 	bic.w	r2, r3, #16
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0320 	bic.w	r3, r3, #32
 8005b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a1d      	ldr	r2, [pc, #116]	; (8005c0c <TIM_OC2_SetConfig+0xd0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d10d      	bne.n	8005bb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <TIM_OC2_SetConfig+0xd0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d113      	bne.n	8005be8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr
 8005c0c:	40012c00 	.word	0x40012c00

08005c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1d      	ldr	r2, [pc, #116]	; (8005ce0 <TIM_OC3_SetConfig+0xd0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10d      	bne.n	8005c8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a14      	ldr	r2, [pc, #80]	; (8005ce0 <TIM_OC3_SetConfig+0xd0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d113      	bne.n	8005cba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	011b      	lsls	r3, r3, #4
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	621a      	str	r2, [r3, #32]
}
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40012c00 	.word	0x40012c00

08005ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	021b      	lsls	r3, r3, #8
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a0f      	ldr	r2, [pc, #60]	; (8005d7c <TIM_OC4_SetConfig+0x98>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d109      	bne.n	8005d58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	019b      	lsls	r3, r3, #6
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	621a      	str	r2, [r3, #32]
}
 8005d72:	bf00      	nop
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	40012c00 	.word	0x40012c00

08005d80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d98:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b70      	cmp	r3, #112	; 0x70
 8005dc4:	d01a      	beq.n	8005dfc <TIM_SlaveTimer_SetConfig+0x7c>
 8005dc6:	2b70      	cmp	r3, #112	; 0x70
 8005dc8:	d860      	bhi.n	8005e8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005dca:	2b60      	cmp	r3, #96	; 0x60
 8005dcc:	d054      	beq.n	8005e78 <TIM_SlaveTimer_SetConfig+0xf8>
 8005dce:	2b60      	cmp	r3, #96	; 0x60
 8005dd0:	d85c      	bhi.n	8005e8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005dd2:	2b50      	cmp	r3, #80	; 0x50
 8005dd4:	d046      	beq.n	8005e64 <TIM_SlaveTimer_SetConfig+0xe4>
 8005dd6:	2b50      	cmp	r3, #80	; 0x50
 8005dd8:	d858      	bhi.n	8005e8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d019      	beq.n	8005e12 <TIM_SlaveTimer_SetConfig+0x92>
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d854      	bhi.n	8005e8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005de2:	2b30      	cmp	r3, #48	; 0x30
 8005de4:	d054      	beq.n	8005e90 <TIM_SlaveTimer_SetConfig+0x110>
 8005de6:	2b30      	cmp	r3, #48	; 0x30
 8005de8:	d850      	bhi.n	8005e8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005dea:	2b20      	cmp	r3, #32
 8005dec:	d050      	beq.n	8005e90 <TIM_SlaveTimer_SetConfig+0x110>
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d84c      	bhi.n	8005e8c <TIM_SlaveTimer_SetConfig+0x10c>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d04c      	beq.n	8005e90 <TIM_SlaveTimer_SetConfig+0x110>
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d04a      	beq.n	8005e90 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005dfa:	e047      	b.n	8005e8c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68d9      	ldr	r1, [r3, #12]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f000 f8bd 	bl	8005f8a <TIM_ETR_SetConfig>
      break;
 8005e10:	e03f      	b.n	8005e92 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d101      	bne.n	8005e1e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e03a      	b.n	8005e94 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0201 	bic.w	r2, r2, #1
 8005e34:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e44:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	621a      	str	r2, [r3, #32]
      break;
 8005e62:	e016      	b.n	8005e92 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	6899      	ldr	r1, [r3, #8]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	461a      	mov	r2, r3
 8005e72:	f000 f813 	bl	8005e9c <TIM_TI1_ConfigInputStage>
      break;
 8005e76:	e00c      	b.n	8005e92 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6899      	ldr	r1, [r3, #8]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	461a      	mov	r2, r3
 8005e86:	f000 f837 	bl	8005ef8 <TIM_TI2_ConfigInputStage>
      break;
 8005e8a:	e002      	b.n	8005e92 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005e8c:	bf00      	nop
 8005e8e:	e000      	b.n	8005e92 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005e90:	bf00      	nop
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f023 0201 	bic.w	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 030a 	bic.w	r3, r3, #10
 8005ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f023 0210 	bic.w	r2, r3, #16
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	031b      	lsls	r3, r3, #12
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	621a      	str	r2, [r3, #32]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr

08005f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f043 0307 	orr.w	r3, r3, #7
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	609a      	str	r2, [r3, #8]
}
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr

08005f8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b087      	sub	sp, #28
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	021a      	lsls	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	609a      	str	r2, [r3, #8]
}
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bc80      	pop	{r7}
 8005fc6:	4770      	bx	lr

08005fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2201      	movs	r2, #1
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1a      	ldr	r2, [r3, #32]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	401a      	ands	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a1a      	ldr	r2, [r3, #32]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 031f 	and.w	r3, r3, #31
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	431a      	orrs	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006024:	2302      	movs	r3, #2
 8006026:	e046      	b.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00e      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006074:	d009      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a12      	ldr	r2, [pc, #72]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d004      	beq.n	800608a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d10c      	bne.n	80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4313      	orrs	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800

080060cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e03d      	b.n	8006164 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr

08006180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr

08006192 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e03f      	b.n	8006224 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7fc fb9b 	bl	80028f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2224      	movs	r2, #36	; 0x24
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f828 	bl	800622c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695a      	ldr	r2, [r3, #20]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800620a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006266:	f023 030c 	bic.w	r3, r3, #12
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6812      	ldr	r2, [r2, #0]
 800626e:	68b9      	ldr	r1, [r7, #8]
 8006270:	430b      	orrs	r3, r1
 8006272:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <UART_SetConfig+0x114>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d103      	bne.n	800629c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006294:	f7fe f8f6 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8006298:	60f8      	str	r0, [r7, #12]
 800629a:	e002      	b.n	80062a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800629c:	f7fe f8de 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 80062a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009a      	lsls	r2, r3, #2
 80062ac:	441a      	add	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b8:	4a22      	ldr	r2, [pc, #136]	; (8006344 <UART_SetConfig+0x118>)
 80062ba:	fba2 2303 	umull	r2, r3, r2, r3
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	0119      	lsls	r1, r3, #4
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009a      	lsls	r2, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062d8:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <UART_SetConfig+0x118>)
 80062da:	fba3 0302 	umull	r0, r3, r3, r2
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	2064      	movs	r0, #100	; 0x64
 80062e2:	fb00 f303 	mul.w	r3, r0, r3
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	3332      	adds	r3, #50	; 0x32
 80062ec:	4a15      	ldr	r2, [pc, #84]	; (8006344 <UART_SetConfig+0x118>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f8:	4419      	add	r1, r3
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009a      	lsls	r2, r3, #2
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006310:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <UART_SetConfig+0x118>)
 8006312:	fba3 0302 	umull	r0, r3, r3, r2
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	2064      	movs	r0, #100	; 0x64
 800631a:	fb00 f303 	mul.w	r3, r0, r3
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	3332      	adds	r3, #50	; 0x32
 8006324:	4a07      	ldr	r2, [pc, #28]	; (8006344 <UART_SetConfig+0x118>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	f003 020f 	and.w	r2, r3, #15
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	440a      	add	r2, r1
 8006336:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40013800 	.word	0x40013800
 8006344:	51eb851f 	.word	0x51eb851f

08006348 <__libc_init_array>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	2600      	movs	r6, #0
 800634c:	4d0c      	ldr	r5, [pc, #48]	; (8006380 <__libc_init_array+0x38>)
 800634e:	4c0d      	ldr	r4, [pc, #52]	; (8006384 <__libc_init_array+0x3c>)
 8006350:	1b64      	subs	r4, r4, r5
 8006352:	10a4      	asrs	r4, r4, #2
 8006354:	42a6      	cmp	r6, r4
 8006356:	d109      	bne.n	800636c <__libc_init_array+0x24>
 8006358:	f000 f822 	bl	80063a0 <_init>
 800635c:	2600      	movs	r6, #0
 800635e:	4d0a      	ldr	r5, [pc, #40]	; (8006388 <__libc_init_array+0x40>)
 8006360:	4c0a      	ldr	r4, [pc, #40]	; (800638c <__libc_init_array+0x44>)
 8006362:	1b64      	subs	r4, r4, r5
 8006364:	10a4      	asrs	r4, r4, #2
 8006366:	42a6      	cmp	r6, r4
 8006368:	d105      	bne.n	8006376 <__libc_init_array+0x2e>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006370:	4798      	blx	r3
 8006372:	3601      	adds	r6, #1
 8006374:	e7ee      	b.n	8006354 <__libc_init_array+0xc>
 8006376:	f855 3b04 	ldr.w	r3, [r5], #4
 800637a:	4798      	blx	r3
 800637c:	3601      	adds	r6, #1
 800637e:	e7f2      	b.n	8006366 <__libc_init_array+0x1e>
 8006380:	08007790 	.word	0x08007790
 8006384:	08007790 	.word	0x08007790
 8006388:	08007790 	.word	0x08007790
 800638c:	08007794 	.word	0x08007794

08006390 <memset>:
 8006390:	4603      	mov	r3, r0
 8006392:	4402      	add	r2, r0
 8006394:	4293      	cmp	r3, r2
 8006396:	d100      	bne.n	800639a <memset+0xa>
 8006398:	4770      	bx	lr
 800639a:	f803 1b01 	strb.w	r1, [r3], #1
 800639e:	e7f9      	b.n	8006394 <memset+0x4>

080063a0 <_init>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr

080063ac <_fini>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	bf00      	nop
 80063b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b2:	bc08      	pop	{r3}
 80063b4:	469e      	mov	lr, r3
 80063b6:	4770      	bx	lr
